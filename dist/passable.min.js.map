{"version":3,"file":"passable.min.js","sources":["../src/core/context/index.js","../src/core/test/index.js","../src/core/passableResult/index.js","../src/constants.js","../src/core/Specific/index.js","../src/core/passable/index.js","../src/Enforce/runnables/rules/is_array/index.js","../src/Enforce/runnables/rules/is_number/index.js","../src/Enforce/runnables/rules/is_string/index.js","../src/Enforce/runnables/rules/matches/index.js","../src/Enforce/runnables/rules/inside/index.js","../src/Enforce/runnables/rules/equals/index.js","../src/Enforce/runnables/rules/is_numeric/index.js","../src/Enforce/runnables/rules/is_empty/index.js","../src/Enforce/runnables/rules/greater_than/index.js","../src/Enforce/runnables/rules/greater_than_or_equals/index.js","../src/Enforce/runnables/rules/less_than/index.js","../src/Enforce/runnables/rules/less_than_or_equals/index.js","../src/Enforce/runnables/rules/length_equals/index.js","../src/Enforce/runnables/index.js","../src/Enforce/runnables/helpers/extend_rules/index.js","../src/Enforce/runnables/rules/longer_than/index.js","../src/Enforce/runnables/rules/longer_than_or_equals/index.js","../src/Enforce/runnables/rules/shorter_than/index.js","../src/Enforce/runnables/rules/shorter_than_or_equals/index.js","../src/Enforce/runners/rule/index.js","../src/Enforce/index.js","../src/index.js","../src/utilities/validate/index.js","../src/utilities/any/index.js"],"sourcesContent":["const Context = function() {}; // eslint-disable-line\n\nContext.prototype.set = function(parent) {\n    this.parent = parent;\n    return this;\n};\n\nconst context = new Context();\n\nexport default context;\n","import ctx from '../context';\n\n/**\n * Runs all async tests, updates output object with result\n * @param {Promise} testPromise the actual test callback or promise\n */\nexport const runAsync = (testPromise) => {\n    const { fieldName, statement, severity, parent } = testPromise;\n\n    parent.result.markAsync(fieldName);\n\n    const done = () => {\n        clearPendingTest(testPromise);\n        if (!hasRemainingPendingTests(parent, fieldName)) {\n            parent.result.markAsDone(fieldName);\n        }\n\n        if (!hasRemainingPendingTests(parent)) {\n            parent.result.markAsDone();\n        }\n    };\n\n    const fail = () => {\n        if (parent.pending.includes(testPromise)) {\n            parent.result.fail(fieldName, statement, severity);\n        }\n\n        done();\n    };\n\n    try {\n        testPromise.then(done, fail);\n    } catch (e) {\n        fail();\n    }\n};\n\n/**\n * Clears pending test from parent context\n * @param {Promise} testPromise the actual test callback or promise\n */\nconst clearPendingTest = (testPromise) => {\n    testPromise.parent.pending = testPromise.parent.pending.filter((t) => t !== testPromise);\n};\n\n/**\n * Checks if there still are remaining pending tests for given criteria\n * @param {Object} parent Parent context\n * @param {String} fieldName name of the field to test against\n * @return {Boolean}\n */\nconst hasRemainingPendingTests = (parent, fieldName) => {\n    if (!parent.pending.length) {\n        return false;\n    }\n\n    if (fieldName) {\n        return parent.pending.some((testPromise) => testPromise.fieldName === fieldName);\n    }\n\n    return !!parent.pending.length;\n};\n\n/**\n * Performs shallow run over test functions, assuming sync tests only. Returning result\n * @param {function | Promise} testFn the actual test callback or promise\n * @return {*} result from test function\n */\nconst preRun = (testFn) => {\n    let result;\n    try {\n        result = testFn();\n    } catch (e) {\n        result = false;\n    }\n    if (result === false) {\n        testFn.parent.result.fail(testFn.fieldName, testFn.statement, testFn.severity);\n    }\n\n    return result;\n};\n\n/**\n * Registers all supplied tests, if async - adds to pending array\n * @param {function | Promise} testFn the actual test callback or promise\n */\nconst register = (testFn) => {\n    const { parent, fieldName } = testFn;\n    let pending = false;\n    let result;\n\n    if (parent.specific.excludes(fieldName)) {\n        parent.result.addToSkipped(fieldName);\n        return;\n    }\n\n    parent.result.initFieldCounters(fieldName);\n    parent.result.bumpTestCounter(fieldName);\n\n    if (testFn && typeof testFn.then === 'function') {\n        pending = true;\n    } else {\n        result = preRun(testFn);\n    }\n\n    if (result && typeof result.then === 'function') {\n        pending = true;\n        testFn = Object.assign(result, testFn);\n    }\n\n    if (pending) {\n        parent.pending.push(testFn);\n    }\n};\n\n/**\n * The function used by the consumer\n * @param {String} fieldName name of the field to test against\n * @param {String} statement the message shown to the user in case of a failure\n * @param {function | Promise} testFn the actual test callback or promise\n * @param {String} Severity indicates whether the test should fail or warn\n */\nconst test = (fieldName, statement, testFn, severity) => {\n    if (!testFn) {\n        return;\n    }\n    if (typeof testFn.then === 'function' || typeof testFn === 'function') {\n        Object.assign(testFn, {\n            fieldName,\n            statement,\n            severity,\n            parent: ctx.parent\n        });\n\n        register(testFn);\n    }\n};\n\nexport default test;\n","import { WARN, FAIL } from '../../constants';\nconst severities = [ WARN, FAIL ];\n\nconst passableResult = (name) => {\n\n    const completionCallbacks = [];\n    let asyncObject = null;\n    let hasValidationErrors = false;\n    let hasValidationWarnings = false;\n    let cancelled = false;\n\n    /**\n     * Initializes specific field's counters\n     * @param {string} fieldName - The name of the field.\n     */\n    const initFieldCounters = (fieldName) => {\n        if (output.testsPerformed[fieldName]) { return output; }\n\n        output.testsPerformed[fieldName] = {\n            testCount: 0,\n            failCount: 0,\n            warnCount: 0\n        };\n    };\n\n    /**\n     * Bumps test counters to indicate tests that's being performed\n     * @param {string} fieldName - The name of the field.\n     */\n    const bumpTestCounter = (fieldName) => {\n        if (!output.testsPerformed[fieldName]) { return output; }\n\n        output.testsPerformed[fieldName].testCount++;\n        output.testCount++;\n    };\n\n    /**\n     * Bumps field's warning counts and adds warning string\n     * @param {string} fieldName - The name of the field.\n     * @param {string} statement - The error string to add to the object.\n     */\n    const bumpTestWarning = (fieldName, statement) => {\n        hasValidationWarnings = true;\n        output.warnings[fieldName] = output.warnings[fieldName] || [];\n        output.warnings[fieldName].push(statement);\n        output.warnCount++;\n        output.testsPerformed[fieldName].warnCount++;\n    };\n\n    /**\n     * Bumps field's error counts and adds error string\n     * @param {string} fieldName - The name of the field.\n     * @param {string} statement - The error string to add to the object.\n     */\n    const bumpTestError = (fieldName, statement) => {\n        hasValidationErrors = true;\n        output.errors[fieldName] = output.errors[fieldName] || [];\n        output.errors[fieldName].push(statement);\n        output.failCount++;\n        output.testsPerformed[fieldName].failCount++;\n    };\n\n    /**\n     * Fails a field and updates output accordingly\n     * @param {string} fieldName - The name of the field.\n     * @param {string} statement - The error string to add to the object.\n     * @param {string} severity - Whether it is a `fail` or `warn` test.\n     */\n    const fail = (fieldName, statement, severity) => {\n        if (!output.testsPerformed[fieldName]) { return output; }\n        const selectedSeverity = severity && severities.includes(severity) ? severity : FAIL;\n        selectedSeverity === WARN\n            ? bumpTestWarning(fieldName, statement)\n            : bumpTestError(fieldName, statement);\n    };\n\n    /**\n     * Uniquely add a field to the `skipped` list\n     * @param {string} fieldName\n     */\n    const addToSkipped = (fieldName) => {\n        !output.skipped.includes(fieldName) && output.skipped.push(fieldName);\n    };\n\n    /**\n     * Runs completion callbacks aggregated by `done`\n     * regardless of success or failure\n     */\n    const runCompletionCallbacks = () => {\n        completionCallbacks.forEach((cb) => !cancelled && cb(output));\n    };\n\n    /**\n     * Marks a field as async\n     * @param {string} fieldName the name of the field marked as async\n    */\n    const markAsync = (fieldName) => {\n        asyncObject = asyncObject || {};\n        asyncObject[fieldName] = asyncObject[fieldName] || {};\n        asyncObject[fieldName] = {\n            done: false,\n            callbacks: asyncObject[fieldName].callbacks || []\n        };\n    };\n\n    /**\n     * Marks an async field as done\n     * @param {string} fieldName the name of the field marked as done\n    */\n    const markAsDone = (fieldName) => {\n        if (!fieldName) {\n            return runCompletionCallbacks();\n        }\n\n        if (asyncObject !== null && asyncObject[fieldName]) {\n            asyncObject[fieldName].done = true;\n\n            // run field callbacks set in `after`\n            if (asyncObject[fieldName].callbacks) {\n                asyncObject[fieldName].callbacks.forEach((callback) => !cancelled && callback(output));\n            }\n        }\n    };\n\n    /**\n     * Registers callback functions to be run when test suite is done running\n     * If current suite is not async, runs the callback immediately\n     * @param {function} callback the function to be called on done\n     * @return {object} output object\n     */\n    const done = (callback) => {\n        if (typeof callback !== 'function') {return output;}\n        if (!asyncObject) {\n            callback(output);\n        }\n\n        completionCallbacks.push(callback);\n        return output;\n    };\n\n    /**\n     * Registers callback functions to be run when a certain field is done running\n     * If field is not async, runs the callback immediately\n     * @param {function} callback the function to be called on done\n     * @return {object} output object\n     */\n    const after = (fieldName, callback) => {\n        if (typeof callback !== 'function') {\n            return output;\n        }\n\n        asyncObject = asyncObject || {};\n        if (!asyncObject[fieldName] && output.testsPerformed[fieldName]) {\n            callback(output);\n        } else if (asyncObject[fieldName]) {\n            asyncObject[fieldName].callbacks = [...(asyncObject[fieldName].callbacks || []), callback];\n        }\n\n        return output;\n    };\n\n    /**\n     * cancels done/after callbacks. They won't invoke when async operations complete\n     */\n    const cancel = () => {\n        cancelled = true;\n\n        return output;\n    };\n\n    /**\n     * Gets all the errors of a field, or of the whole object\n     * @param {string} [fieldName] - The name of the field.\n     * @return {Array | Object} The field's errors, or all errors\n     */\n    const getErrors = (fieldName) => {\n        if (!fieldName) {\n            return output.errors;\n        }\n\n        if (output.errors[fieldName]) {\n            return output.errors[fieldName];\n        }\n\n        return [];\n    };\n\n    /**\n     * Gets all the warnings of a field, or of the whole object\n     * @param {string} [fieldName] - The name of the field.\n     * @return {Array | Object} The field's warnings, or all warnings\n     */\n    const getWarnings = (fieldName) => {\n        if (!fieldName) {\n            return output.warnings;\n        }\n\n        if (output.warnings[fieldName]) {\n            return output.warnings[fieldName];\n        }\n\n        return [];\n    };\n\n    /**\n     * Checks if a certain field (or the whole suite) has errors\n     * @param {string} [fieldName]\n     * @return {boolean}\n     */\n    const hasErrors = (fieldName) => {\n        if (!fieldName) {\n            return hasValidationErrors;\n        }\n\n        return Boolean(output.getErrors(fieldName).length);\n    };\n\n    /**\n     * Checks if a certain field (or the whole suite) has warnings\n     * @param {string} [fieldName]\n     * @return {boolean}\n     */\n    const hasWarnings = (fieldName) => {\n        if (!fieldName) {\n            return hasValidationWarnings;\n        }\n\n        return Boolean(output.getWarnings(fieldName).length);\n    };\n\n    const output = {\n        name,\n        failCount: 0,\n        warnCount: 0,\n        testCount: 0,\n        testsPerformed: {},\n        errors: {},\n        warnings: {},\n        skipped: [],\n        hasErrors,\n        hasWarnings,\n        getErrors,\n        getWarnings,\n        done,\n        after,\n        cancel\n    };\n\n    return {\n        initFieldCounters,\n        bumpTestError,\n        bumpTestWarning,\n        bumpTestCounter,\n        fail,\n        addToSkipped,\n        runCompletionCallbacks,\n        markAsync,\n        markAsDone,\n        output\n    };\n};\n\nexport default passableResult;","export const WARN = 'warn';\nexport const FAIL = 'fail';\n","/** Class representing validation inclusion and exclusion groups */\nclass Specific {\n\n    /**\n     * Initialize Specific object\n     *\n     * @param {String | Array | Object | undefined} specific\n     */\n    constructor(specific) {\n\n        if (!specific) { return; }\n\n        if (!Specific.is(specific)) {\n            throw new TypeError();\n        }\n\n        if (typeof specific === 'string' || Array.isArray(specific)) {\n            if (specific.length === 0) { return; }\n            this.only = this.populateGroup(this.only, specific);\n            return;\n        }\n\n        if (specific.only) {\n            this.only = this.populateGroup(this.only, specific.only);\n        }\n\n        if (specific.not) {\n            this.not = this.populateGroup(this.not, specific.not);\n        }\n    }\n\n    /**\n     * Populate inclusion and exclusion groups\n     *\n     * @param {Object} group - the group to populate.\n     * @param {String | Array} field - the field to add to the group\n     * @return {Object} modified group\n     */\n    populateGroup(group, field) {\n        group = group || {};\n\n        if (typeof field === 'string') {\n            group[field] = true;\n        } else if (Array.isArray(field)) {\n            field.forEach((item) => group[item] = true);\n        }\n\n        return group;\n    }\n\n    /**\n     * Checkes whether a given field name is in exclusion group\n     * or not a member of inclusion group (when present)\n     *\n     * @param {String} fieldName\n     * @return {Boolean}\n     */\n    excludes(fieldName) {\n        if (this.only && !this.only[fieldName]) {\n            return true;\n        }\n\n        if (this.not && this.not[fieldName]) {\n            return true;\n        }\n\n        return false;\n    }\n\n    /**\n     * Test whether a given argument matches\n     * the `specific` filter convention\n     *\n     * @param {Any} item\n     * @return {boolean}\n     */\n    static is(item) {\n        if (Array.isArray(item)) {\n            return item.every((item) => typeof item === 'string');\n        }\n\n        if (typeof item === 'string') { return true; }\n\n        if (item !== null && typeof item === 'object' && (\n            item.hasOwnProperty('only')\n            || item.hasOwnProperty('not')\n        )) {\n            return true;\n        }\n\n        return false;\n    }\n}\n\nexport default Specific;","import ctx from '../context';\nimport test, { runAsync } from '../test';\nimport passableResult from '../passableResult';\nimport Specific from '../Specific';\n\nconst initError = (name, value, doc) => `[Passable]: failed during suite initialization. Unexpected '${typeof value}' for '${name}' argument.\n    See: ${doc ? doc : 'https://fiverr.github.io/passable/getting_started/writing_tests.html'}`;\n\nconst passable = (name, tests, specific) => {\n\n    if (typeof name !== 'string') {\n        throw new TypeError(initError('suite name', name));\n    }\n\n    if (typeof tests !== 'function') {\n        throw new TypeError(initError('tests', tests));\n    }\n\n    if (specific && !Specific.is(specific)) {\n        throw new TypeError(initError('specific', tests, 'https://fiverr.github.io/passable/test/specific.html'));\n    }\n\n    const result = passableResult(name);\n\n    const pending = [];\n\n    const parent = {\n        specific: new Specific(specific),\n        result,\n        pending\n    };\n\n    ctx.set(parent);\n\n    tests(test, result.output);\n    ctx.set(null);\n\n    [...pending].forEach(runAsync);\n\n    return result.output;\n};\n\nexport default passable;\n","function isArray(value) {\n    return Boolean(Array.isArray(value));\n}\n\nisArray.negativeForm = 'isNotArray';\n\nexport default isArray;\n","function isNumber(value) {\n    return Boolean(typeof value === 'number');\n}\n\nisNumber.negativeForm = 'isNotNumber';\n\nexport default isNumber;\n","function isString(value) {\n    return Boolean(typeof value === 'string');\n}\n\nisString.negativeForm = 'isNotString';\n\nexport default isString;\n","function matches(value, regex) {\n    if (regex instanceof RegExp) {\n        return regex.test(value);\n    } else if (typeof regex === 'string') {\n        return new RegExp(regex).test(value);\n    } else {\n        return false;\n    }\n}\n\nmatches.negativeForm = 'notMatches';\n\nexport default matches;\n","function inside(value, arg1) {\n\n    if (Array.isArray(arg1) && ['string', 'number', 'boolean'].includes(typeof value)) {\n        return arg1.includes(value);\n    }\n\n    // both value and arg1 are strings\n    if (typeof arg1 === 'string' && typeof value === 'string') {\n        return arg1.includes(value);\n    }\n\n    return false;\n}\n\ninside.negativeForm = 'notInside';\n\nexport default inside;\n","function equals(value, arg1) {\n    return value === arg1;\n}\n\nequals.negativeForm = 'notEquals';\n\nexport default equals;\n","function isNumeric(value) {\n    const result = !isNaN(parseFloat(value)) && !isNaN(Number(value)) && isFinite(value);\n    return Boolean(result);\n}\n\nisNumeric.negativeForm = 'isNotNumeric';\n\nexport default isNumeric;\n","import isNumeric from '../is_numeric';\n\nfunction isEmpty(value) {\n    if (!value) {\n        return true;\n    } else if (isNumeric(value)) {\n        return value === 0;\n    } else if (value.hasOwnProperty('length')) {\n        return value.length === 0;\n    } else if (typeof value === 'object') {\n        return Object.keys(value).length === 0;\n    } else {\n        return true;\n    }\n}\n\nisEmpty.negativeForm = 'isNotEmpty';\n\nexport default isEmpty;\n","import isNumeric from '../is_numeric';\n\nfunction greaterThan(value, arg1) {\n    return isNumeric(value) && isNumeric(arg1) && Number(value) > Number(arg1);\n}\n\ngreaterThan.alias = 'gt';\n\nexport default greaterThan;\n","import isNumeric from '../is_numeric';\n\nfunction greaterThanOrEquals(value, arg1) {\n    return isNumeric(value) && isNumeric(arg1) && Number(value) >= Number(arg1);\n}\n\ngreaterThanOrEquals.alias = 'gte';\n\nexport default greaterThanOrEquals;\n","import isNumeric from '../is_numeric';\n\nfunction lessThan(value, arg1) {\n    return isNumeric(value) && isNumeric(arg1) && Number(value) < Number(arg1);\n}\n\nlessThan.alias = 'lt';\n\nexport default lessThan;\n","import isNumeric from '../is_numeric';\n\nfunction lessThanOrEquals(value, arg1) {\n    return isNumeric(value) && isNumeric(arg1) && Number(value) <= Number(arg1);\n}\n\nlessThanOrEquals.alias = 'lte';\n\nexport default lessThanOrEquals;\n","function lengthEquals(value, arg1) {\n    return value.length === arg1;\n}\n\nlengthEquals.negativeForm = 'lengthNotEquals';\n\nexport default lengthEquals;\n","import isArray from './rules/is_array';\nimport isNumber from './rules/is_number';\nimport isString from './rules/is_string';\nimport matches from './rules/matches';\nimport inside from './rules/inside';\nimport equals from './rules/equals';\nimport isNumeric from './rules/is_numeric';\nimport isEmpty from './rules/is_empty';\nimport greaterThan from './rules/greater_than';\nimport greaterThanOrEquals from './rules/greater_than_or_equals';\nimport lessThan from './rules/less_than';\nimport lessThanOrEquals from './rules/less_than_or_equals';\nimport longerThan from './rules/longer_than';\nimport longerThanOrEquals from './rules/longer_than_or_equals';\nimport shorterThan from './rules/shorter_than';\nimport shorterThanOrEquals from './rules/shorter_than_or_equals';\nimport lengthEquals from './rules/length_equals';\nimport extendRules from './helpers/extend_rules';\n\nconst rules = {\n    isArray,\n    isNumber,\n    isString,\n    matches,\n    inside,\n    equals,\n    isNumeric,\n    isEmpty,\n    greaterThan,\n    greaterThanOrEquals,\n    lessThan,\n    lessThanOrEquals,\n    longerThan,\n    longerThanOrEquals,\n    shorterThan,\n    shorterThanOrEquals,\n    lengthEquals\n};\n\nexport default extendRules(rules);","/**\n * Collects rules with `negativeForm` or `alias` attributes.\n * Adds a rule with the correct configuration.\n * @param {Object} rules - enforce rules object\n * @returns {Object} extended rules object\n */\nfunction extendRules(rules) {\n\n    for (const rule in rules) {\n        const negativeForm = rules[rule].negativeForm;\n        const alias = rules[rule].alias;\n\n        if (negativeForm) {\n            rules[negativeForm] = (...args) => !rules[rule](...args);\n        }\n\n        if (alias) {\n            rules[alias] = rules[rule];\n        }\n    }\n\n    return rules;\n}\n\nexport default extendRules;\n","function longerThan(value, arg1) {\n    return value.length > arg1;\n}\n\nexport default longerThan;\n","function longerThanOrEquals(value, arg1) {\n    return value.length >= arg1;\n}\n\nexport default longerThanOrEquals;\n","function shorterThan(value, arg1) {\n    return value.length < arg1;\n}\n\nexport default shorterThan;\n","function shorterThanOrEquals(value, arg1) {\n    return value.length <= arg1;\n}\n\nexport default shorterThanOrEquals;\n","/**\n * Run a single rule against enforced value (e.g. `isNumber()`)\n *\n * @param {Function} rule - rule to run\n * @param {Any} value\n * @param {Array} args list of arguments sent from consumer\n */\nfunction rule(rule, value, ...args) {\n\n    if (typeof rule !== 'function') { return; }\n\n    if (rule(value, ...args) !== true) {\n        throw new Error(`[Enforce]: invalid ${typeof value} value`);\n    }\n}\n\nexport default rule;\n","import rules from './runnables';\nimport ruleRunner from './runners/rule';\n\nconst isRule = (rulesObject, name) => (\n    rulesObject.hasOwnProperty(name) && typeof rulesObject[name] === 'function'\n);\n\nconst Enforce = (customRules = {}) => {\n    const rulesObject = {...rules, ...customRules};\n\n    if (typeof Proxy === 'function') {\n        return (value) => {\n            const proxy = new Proxy(rulesObject, {\n                get: (rules, fnName) => {\n                    if (!isRule(rules, fnName)) { return; }\n\n                    return (...args) => {\n                        ruleRunner(rules[fnName], value, ...args);\n                        return proxy;\n                    };\n                }\n            });\n            return proxy;\n        };\n    }\n\n    // This is relatively heavier, and preferably should only be done when lacking proxy support\n    return (value) => Object.keys(rulesObject).reduce((allRules, fnName) => {\n        if (!isRule(rulesObject, fnName)) { return allRules; }\n\n        allRules[fnName] = (...args) => {\n            ruleRunner(rulesObject[fnName], value, ...args);\n            return allRules;\n        };\n\n        return allRules;\n    }, {});\n};\n\nexport default Enforce;\n","import passable from './core/passable';\nimport test from './core/test';\nimport Enforce from './Enforce';\nimport validate from './utilities/validate';\nimport any from './utilities/any';\nimport { WARN, FAIL } from './constants';\n\npassable.VERSION = PASSABLE_VERSION;\npassable.enforce = new Enforce({});\npassable.test = test;\npassable.Enforce = Enforce;\npassable.validate = validate;\npassable.any = any;\npassable.WARN = WARN;\npassable.FAIL = FAIL;\n\nexport default passable;\n","/**\n * Run tests and catch errors\n *\n * @param {function} callback The test content\n * @return {boolean}\n */\nfunction validate(test) {\n\n    if (typeof test !== 'function' && !(test instanceof Promise)) {\n        throw new TypeError(`[Validate]: expected ${typeof test} to be a function.`);\n    }\n\n    try {\n        return test() !== false;\n    } catch (_) {\n        return false;\n    }\n}\n\nexport default validate;\n","/**\n * Runs given functions and returns true if any of them passes\n * @param  {[]Function} args array of assertion functions\n * @return {Function} A function which, when called, invokes all arguments\n */\nconst any = (...args) => () => args.some((fn) => {\n    try {\n        return fn() !== false;\n    } catch (err) {\n        return false;\n    }\n});\n\nexport default any;\n"],"names":["Context","prototype","set","parent","this","context","runAsync","testPromise","fieldName","statement","severity","result","markAsync","done","clearPendingTest","hasRemainingPendingTests","markAsDone","fail","pending","includes","then","e","filter","t","length","some","test","testFn","ctx","specific","excludes","addToSkipped","initFieldCounters","bumpTestCounter","preRun","_extends","push","register","severities","Specific","is","TypeError","Array","isArray","only","populateGroup","not","item","every","_typeof","hasOwnProperty","group","field","forEach","initError","name","value","doc","passable","tests","completionCallbacks","asyncObject","hasValidationErrors","hasValidationWarnings","cancelled","bumpTestWarning","output","warnings","warnCount","testsPerformed","bumpTestError","errors","failCount","runCompletionCallbacks","cb","testCount","skipped","hasErrors","Boolean","getErrors","hasWarnings","getWarnings","callback","after","callbacks","cancel","passableResult","isNumber","isString","matches","regex","RegExp","inside","arg1","equals","isNumeric","isNaN","parseFloat","Number","isFinite","isEmpty","Object","keys","greaterThan","greaterThanOrEquals","lessThan","lessThanOrEquals","lengthEquals","negativeForm","alias","rules","rule","extendRules","longerThan","longerThanOrEquals","shorterThan","shorterThanOrEquals","args","Error","isRule","rulesObject","Enforce","customRules","Proxy","proxy","get","fnName","ruleRunner","reduce","allRules","VERSION","PASSABLE_VERSION","enforce","validate","Promise","_","any","fn","err","WARN","FAIL"],"mappings":"+nDAAA,IAAMA,EAAU,aAEhBA,EAAQC,UAAUC,IAAM,SAASC,eACxBA,OAASA,EACPC,MAGX,IAAMC,EAAU,IAAIL,ECDPM,EAAW,SAACC,OACbC,EAA2CD,EAA3CC,UAAWC,EAAgCF,EAAhCE,UAAWC,EAAqBH,EAArBG,SAAUP,EAAWI,EAAXJ,OAExCA,EAAOQ,OAAOC,UAAUJ,OAElBK,EAAO,WACTC,EAAiBP,GACZQ,EAAyBZ,EAAQK,IAClCL,EAAOQ,OAAOK,WAAWR,GAGxBO,EAAyBZ,IAC1BA,EAAOQ,OAAOK,cAIhBC,EAAO,WACLd,EAAOe,QAAQC,SAASZ,IACxBJ,EAAOQ,OAAOM,KAAKT,EAAWC,EAAWC,GAG7CG,SAIAN,EAAYa,KAAKP,EAAMI,GACzB,MAAOI,GACLJ,MAQFH,EAAmB,SAACP,GACtBA,EAAYJ,OAAOe,QAAUX,EAAYJ,OAAOe,QAAQI,OAAO,SAACC,UAAMA,IAAMhB,KAS1EQ,EAA2B,SAACZ,EAAQK,WACjCL,EAAOe,QAAQM,SAIhBhB,EACOL,EAAOe,QAAQO,KAAK,SAAClB,UAAgBA,EAAYC,YAAcA,MAGjEL,EAAOe,QAAQM,SA8DtBE,EAAO,SAAClB,EAAWC,EAAWkB,EAAQjB,GACnCiB,IAGsB,mBAAhBA,EAAOP,MAAyC,mBAAXO,MAC9BA,EAAQ,CAClBnB,UAAAA,EACAC,UAAAA,EACAC,SAAAA,EACAP,OAAQyB,EAAIzB,SA7CP,SAACwB,OAGVhB,IAF0BgB,EAAtBxB,IAAAA,OAAQK,IAAAA,UACZU,GAAU,EAGVf,EAAO0B,SAASC,SAAStB,GACzBL,EAAOQ,OAAOoB,aAAavB,IAI/BL,EAAOQ,OAAOqB,kBAAkBxB,GAChCL,EAAOQ,OAAOsB,gBAAgBzB,GAE1BmB,GAAiC,mBAAhBA,EAAOP,KACxBF,GAAU,EAEVP,EAlCO,SAACgB,OACRhB,MAEAA,EAASgB,IACX,MAAON,GACLV,GAAS,SAEE,IAAXA,GACAgB,EAAOxB,OAAOQ,OAAOM,KAAKU,EAAOnB,UAAWmB,EAAOlB,UAAWkB,EAAOjB,UAGlEC,EAuBMuB,CAAOP,GAGhBhB,GAAiC,mBAAhBA,EAAOS,OACxBF,GAAU,EACVS,EAASQ,EAAcxB,EAAQgB,IAG/BT,GACAf,EAAOe,QAAQkB,KAAKT,IAuBpBU,CAASV,MCrIXW,EAAa,CCDC,OACA,QCAdC,wBAOUV,2GAEHA,OAEAU,EAASC,GAAGX,SACP,IAAIY,aAGU,iBAAbZ,GAAyBa,MAAMC,QAAQd,OACtB,IAApBA,EAASL,mBACRoB,KAAOxC,KAAKyC,cAAczC,KAAKwC,KAAMf,QAI1CA,EAASe,YACJA,KAAOxC,KAAKyC,cAAczC,KAAKwC,KAAMf,EAASe,OAGnDf,EAASiB,WACJA,IAAM1C,KAAKyC,cAAczC,KAAK0C,IAAKjB,EAASiB,wDAiD/CC,UACFL,MAAMC,QAAQI,GACPA,EAAKC,MAAM,SAACD,SAAyB,iBAATA,IAGnB,iBAATA,KAEE,OAATA,GAAiC,WAAhBE,EAAOF,KACxBA,EAAKG,eAAe,UACjBH,EAAKG,eAAe,mDA/CjBC,EAAOC,UACjBD,EAAQA,GAAS,GAEI,iBAAVC,EACPD,EAAMC,IAAS,EACRV,MAAMC,QAAQS,IACrBA,EAAMC,QAAQ,SAACN,UAASI,EAAMJ,IAAQ,IAGnCI,mCAUF3C,YACDJ,KAAKwC,MAASxC,KAAKwC,KAAKpC,QAIxBJ,KAAK0C,MAAO1C,KAAK0C,IAAItC,yCCzD3B8C,EAAY,SAACC,EAAMC,EAAOC,iFAA8ED,qBAAeD,mCAClHE,GAAY,yEAEjBC,EAAW,SAACH,EAAMI,EAAO9B,MAEP,iBAAT0B,QACD,IAAId,UAAUa,EAAU,aAAcC,OAG3B,mBAAVI,QACD,IAAIlB,UAAUa,EAAU,QAASK,OAGvC9B,IAAaU,EAASC,GAAGX,SACnB,IAAIY,UAAUa,EAAU,WAAYK,EAAO,6DAG/ChD,EHnBa,SAAC4C,OAEdK,EAAsB,GACxBC,EAAc,KACdC,GAAsB,EACtBC,GAAwB,EACxBC,GAAY,EAgCVC,EAAkB,SAACzD,EAAWC,GAChCsD,GAAwB,EACxBG,EAAOC,SAAS3D,GAAa0D,EAAOC,SAAS3D,IAAc,GAC3D0D,EAAOC,SAAS3D,GAAW4B,KAAK3B,GAChCyD,EAAOE,YACPF,EAAOG,eAAe7D,GAAW4D,aAQ/BE,EAAgB,SAAC9D,EAAWC,GAC9BqD,GAAsB,EACtBI,EAAOK,OAAO/D,GAAa0D,EAAOK,OAAO/D,IAAc,GACvD0D,EAAOK,OAAO/D,GAAW4B,KAAK3B,GAC9ByD,EAAOM,YACPN,EAAOG,eAAe7D,GAAWgE,aA6B/BC,EAAyB,WAC3Bb,EAAoBP,QAAQ,SAACqB,UAAQV,GAAaU,EAAGR,MA6InDA,EAAS,CACXX,KAAAA,EACAiB,UAAW,EACXJ,UAAW,EACXO,UAAW,EACXN,eAAgB,GAChBE,OAAQ,GACRJ,SAAU,GACVS,QAAS,GACTC,UA9Bc,SAACrE,UACVA,EAIEsE,QAAQZ,EAAOa,UAAUvE,GAAWgB,QAHhCsC,GA6BXkB,YAlBgB,SAACxE,UACZA,EAIEsE,QAAQZ,EAAOe,YAAYzE,GAAWgB,QAHlCuC,GAiBXgB,UAlEc,SAACvE,UACVA,EAID0D,EAAOK,OAAO/D,GACP0D,EAAOK,OAAO/D,GAGlB,GAPI0D,EAAOK,QAiElBU,YAlDgB,SAACzE,UACZA,EAID0D,EAAOC,SAAS3D,GACT0D,EAAOC,SAAS3D,GAGpB,GAPI0D,EAAOC,UAiDlBtD,KAjHS,SAACqE,SACc,mBAAbA,EAAiChB,GACvCL,GACDqB,EAAShB,GAGbN,EAAoBxB,KAAK8C,GAClBhB,IA2GPiB,MAlGU,SAAC3E,EAAW0E,SACE,mBAAbA,EACAhB,KAGXL,EAAcA,GAAe,IACZrD,IAAc0D,EAAOG,eAAe7D,GACjD0E,EAAShB,GACFL,EAAYrD,KACnBqD,EAAYrD,GAAW4E,sBAAiBvB,EAAYrD,GAAW4E,WAAa,KAAKF,KAG9EhB,IAuFPmB,OAjFW,kBACXrB,GAAY,EAELE,UAiFJ,CACHlC,kBA1OsB,SAACxB,MACnB0D,EAAOG,eAAe7D,UAAqB0D,EAE/CA,EAAOG,eAAe7D,GAAa,CAC/BmE,UAAW,EACXH,UAAW,EACXJ,UAAW,IAqOfE,cAAAA,EACAL,gBAAAA,EACAhC,gBA/NoB,SAACzB,OAChB0D,EAAOG,eAAe7D,UAAqB0D,EAEhDA,EAAOG,eAAe7D,GAAWmE,YACjCT,EAAOS,aA4NP1D,KAzLS,SAACT,EAAWC,EAAWC,OAC3BwD,EAAOG,eAAe7D,UAAqB0D,ECrEpC,UDsEaxD,GAAY4B,EAAWnB,SAAST,GAAYA,ECrEzD,QDuENuD,EAAgBzD,EAAWC,GAC3B6D,EAAc9D,EAAWC,IAqL/BsB,aA9KiB,SAACvB,IACjB0D,EAAOU,QAAQzD,SAASX,IAAc0D,EAAOU,QAAQxC,KAAK5B,IA8K3DiE,uBAAAA,EACA7D,UAhKc,SAACJ,IACfqD,EAAcA,GAAe,IACjBrD,GAAaqD,EAAYrD,IAAc,GACnDqD,EAAYrD,GAAa,CACrBK,MAAM,EACNuE,UAAWvB,EAAYrD,GAAW4E,WAAa,KA4JnDpE,WApJe,SAACR,OACXA,SACMiE,IAGS,OAAhBZ,GAAwBA,EAAYrD,KACpCqD,EAAYrD,GAAWK,MAAO,EAG1BgD,EAAYrD,GAAW4E,WACvBvB,EAAYrD,GAAW4E,UAAU/B,QAAQ,SAAC6B,UAAclB,GAAakB,EAAShB,OA2ItFA,OAAAA,GG5OWoB,CAAe/B,GAExBrC,EAAU,GAEVf,EAAS,CACX0B,SAAU,IAAIU,EAASV,GACvBlB,OAAAA,EACAO,QAAAA,UAGJU,EAAI1B,IAAIC,GAERwD,EAAMjC,EAAMf,EAAOuD,QACnBtC,EAAI1B,IAAI,gBAEJgB,GAASmC,QAAQ/C,GAEdK,EAAOuD,QCvClB,SAASvB,EAAQa,UACNsB,QAAQpC,MAAMC,QAAQa,ICDjC,SAAS+B,EAAS/B,UACPsB,QAAyB,iBAAVtB,GCD1B,SAASgC,EAAShC,UACPsB,QAAyB,iBAAVtB,GCD1B,SAASiC,EAAQjC,EAAOkC,UAChBA,aAAiBC,OACVD,EAAMhE,KAAK8B,GACM,iBAAVkC,GACP,IAAIC,OAAOD,GAAOhE,KAAK8B,GCJtC,SAASoC,EAAOpC,EAAOqC,UAEfnD,MAAMC,QAAQkD,IAAS,CAAC,SAAU,SAAU,WAAW1E,WAAgBqC,IAChEqC,EAAK1E,SAASqC,GAIL,iBAATqC,GAAsC,iBAAVrC,GAC5BqC,EAAK1E,SAASqC,GCR7B,SAASsC,EAAOtC,EAAOqC,UACZrC,IAAUqC,ECDrB,SAASE,EAAUvC,OACT7C,GAAUqF,MAAMC,WAAWzC,MAAYwC,MAAME,OAAO1C,KAAW2C,SAAS3C,UACvEsB,QAAQnE,GCAnB,SAASyF,EAAQ5C,UACRA,IAEMuC,EAAUvC,GACA,IAAVA,EACAA,EAAMN,eAAe,UACJ,IAAjBM,EAAMhC,OACW,WAAjByB,EAAOO,IACuB,IAA9B6C,OAAOC,KAAK9C,GAAOhC,QCRlC,SAAS+E,EAAY/C,EAAOqC,UACjBE,EAAUvC,IAAUuC,EAAUF,IAASK,OAAO1C,GAAS0C,OAAOL,GCDzE,SAASW,EAAoBhD,EAAOqC,UACzBE,EAAUvC,IAAUuC,EAAUF,IAASK,OAAO1C,IAAU0C,OAAOL,GCD1E,SAASY,EAASjD,EAAOqC,UACdE,EAAUvC,IAAUuC,EAAUF,IAASK,OAAO1C,GAAS0C,OAAOL,GCDzE,SAASa,EAAiBlD,EAAOqC,UACtBE,EAAUvC,IAAUuC,EAAUF,IAASK,OAAO1C,IAAU0C,OAAOL,GCH1E,SAASc,EAAanD,EAAOqC,UAClBrC,EAAMhC,SAAWqE,EZG5BlD,EAAQiE,aAAe,aCAvBrB,EAASqB,aAAe,cCAxBpB,EAASoB,aAAe,cCMxBnB,EAAQmB,aAAe,aCIvBhB,EAAOgB,aAAe,YCVtBd,EAAOc,aAAe,YCCtBb,EAAUa,aAAe,eCWzBR,EAAQQ,aAAe,aCVvBL,EAAYM,MAAQ,KCApBL,EAAoBK,MAAQ,MCA5BJ,EAASI,MAAQ,KCAjBH,EAAiBG,MAAQ,MCFzBF,EAAaC,aAAe,kBCe5B,MCbA,SAAqBE,kBAENC,OACDH,EAAeE,EAAMC,GAAMH,aAC3BC,EAAQC,EAAMC,GAAMF,MAEtBD,IACAE,EAAMF,GAAgB,kBAAcE,EAAMC,SAAND,eAGpCD,IACAC,EAAMD,GAASC,EAAMC,SATxB,IAAMA,KAAQD,IAARC,UAaJD,EDkBIE,CApBD,CACVrE,QAAAA,EACA4C,SAAAA,EACAC,SAAAA,EACAC,QAAAA,EACAG,OAAAA,EACAE,OAAAA,EACAC,UAAAA,EACAK,QAAAA,EACAG,YAAAA,EACAC,oBAAAA,EACAC,SAAAA,EACAC,iBAAAA,EACAO,WEhCJ,SAAoBzD,EAAOqC,UAChBrC,EAAMhC,OAASqE,GFgCtBqB,mBGjCJ,SAA4B1D,EAAOqC,UACxBrC,EAAMhC,QAAUqE,GHiCvBsB,YIlCJ,SAAqB3D,EAAOqC,UACjBrC,EAAMhC,OAASqE,GJkCtBuB,oBKnCJ,SAA6B5D,EAAOqC,UACzBrC,EAAMhC,QAAUqE,GLmCvBc,aAAAA,IM7BJ,SAASI,EAAKA,EAAMvD,MAEI,mBAATuD,8BAFeM,mCAAAA,wBAIG,IAAzBN,gBAAKvD,UAAU6D,UACT,IAAIC,qCAAmC9D,eCTrD,IAAM+D,EAAS,SAACC,EAAajE,UACzBiE,EAAYtE,eAAeK,IAAsC,mBAAtBiE,EAAYjE,IAGrDkE,EAAU,eAACC,yDAAc,GACrBF,OAAkBV,KAAUY,SAEb,mBAAVC,MACA,SAACnE,OACEoE,EAAQ,IAAID,MAAMH,EAAa,CACjCK,IAAK,SAACf,EAAOgB,MACJP,EAAOT,EAAOgB,UAEZ,sCAAIT,2BAAAA,yBACPU,gBAAWjB,EAAMgB,GAAStE,UAAU6D,IAC7BO,aAIZA,GAKR,SAACpE,UAAU6C,OAAOC,KAAKkB,GAAaQ,OAAO,SAACC,EAAUH,UACpDP,EAAOC,EAAaM,IAEzBG,EAASH,GAAU,sCAAIT,2BAAAA,yBACnBU,gBAAWP,EAAYM,GAAStE,UAAU6D,IACnCY,GAGJA,GAPoCA,GAQ5C,aC7BPvE,EAASwE,QAAUC,QACnBzE,EAAS0E,QAAU,IAAIX,EAAQ,IAC/B/D,EAAShC,KAAOA,EAChBgC,EAAS+D,QAAUA,EACnB/D,EAAS2E,SCLT,SAAkB3G,MAEM,mBAATA,KAAyBA,aAAgB4G,eAC1C,IAAI7F,2CAAyCf,qCAIjC,IAAXA,IACT,MAAO6G,UACE,IDHf7E,EAAS8E,IEPG,sCAAInB,2BAAAA,yBAAS,kBAAMA,EAAK5F,KAAK,SAACgH,cAElB,IAATA,IACT,MAAOC,UACE,OFIfhF,EAASiF,KxBbW,OwBcpBjF,EAASkF,KxBbW"}