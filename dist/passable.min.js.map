{"version":3,"file":"passable.min.js","sources":["../src/core/context/index.js","../src/core/test/TestObject.js","../src/core/test/index.js","../src/core/passableResult/index.js","../src/constants.js","../src/core/Specific/index.js","../src/core/passable/index.js","../node_modules/n4s/dist/enforce.min.js","../node_modules/anyone/any/index.js","../src/index.js","../src/utilities/validate/index.js"],"sourcesContent":["const Context = function() {}; // eslint-disable-line\n\nContext.prototype.set = function(parent) {\n    this.parent = parent;\n    return this;\n};\n\nconst context = new Context();\n\nexport default context;\n","function TestObject(testFn, parent, fieldName, statement, severity) {\n    this.testFn = testFn;\n    this.fieldName = fieldName;\n    this.statement = statement;\n    this.severity = severity;\n    this.parent = parent;\n};\n\nTestObject.prototype.valueOf = function() {\n    return this.isValid !== false;\n};\n\nTestObject.prototype.fail = function() {\n\n    this.parent.result.fail(\n        this.fieldName,\n        this.statement,\n        this.severity\n    );\n\n    this.isValid = false;\n    return this;\n};\n\nTestObject.prototype.setPending = function() {\n    this.parent.pending.push(this);\n};\n\nexport default TestObject;\n","import ctx from '../context';\nimport TestObject from './TestObject';\n\n/**\n * Runs all async tests, updates output object with result\n * @param {Promise} testPromise the actual test callback or promise\n */\nexport const runAsync = (testObject) => {\n    const { fieldName, testFn, statement, parent } = testObject;\n\n    parent.result.markAsync(fieldName);\n\n    const done = () => {\n        clearPendingTest(testObject);\n\n        if (!hasRemainingPendingTests(parent, fieldName)) {\n            parent.result.markAsDone(fieldName);\n        }\n\n        if (!hasRemainingPendingTests(parent)) {\n            parent.result.markAsDone();\n        }\n    };\n\n    const fail = (rejectionMessage) => {\n        testObject.statement = typeof rejectionMessage === 'string'\n            ? rejectionMessage\n            : statement;\n\n        if (parent.pending.includes(testObject)) {\n            testObject.fail();\n        }\n\n        done();\n    };\n\n    try {\n        testFn.then(done, fail);\n    } catch (e) {\n        fail();\n    }\n};\n\n/**\n * Clears pending test from parent context\n * @param {Promise} testPromise the actual test callback or promise\n */\nconst clearPendingTest = (testObject) => {\n    testObject.parent.pending = testObject.parent.pending.filter((t) => t !== testObject);\n};\n\n/**\n * Checks if there still are remaining pending tests for given criteria\n * @param {Object} parent       Parent context\n * @param {String} [fieldName]  Name of the field to test against\n * @return {Boolean}\n */\nconst hasRemainingPendingTests = (parent, fieldName) => {\n    if (!parent.pending.length) {\n        return false;\n    }\n\n    if (fieldName) {\n        return parent.pending.some((testObject) => testObject.fieldName === fieldName);\n    }\n\n    return !!parent.pending.length;\n};\n\n/**\n * Performs shallow run over test functions, assuming sync tests only. Returning result\n * @param {function | Promise} testFn the actual test callback or promise\n * @return {*} result from test function\n */\nconst preRun = (testObject) => {\n    let result;\n    try {\n        result = testObject.testFn();\n    } catch (e) {\n        result = false;\n    }\n\n    if (result === false) {\n        testObject.fail();\n    }\n\n    return result;\n};\n\n/**\n * Registers all supplied tests, if async - adds to pending array\n * @param {function | Promise} testFn the actual test callback or promise\n */\nconst register = (testObject) => {\n    const { testFn, parent, fieldName } = testObject;\n    let pending = false;\n    let result;\n\n    if (parent.specific.excludes(fieldName)) {\n        parent.result.addToSkipped(fieldName);\n        return;\n    }\n\n    parent.result.initFieldCounters(fieldName);\n    parent.result.bumpTestCounter(fieldName);\n\n    if (testFn && typeof testFn.then === 'function') {\n        pending = true;\n    } else {\n        result = preRun(testObject);\n    }\n\n    if (result && typeof result.then === 'function') {\n        pending = true;\n\n        testObject.testFn = result;\n    }\n\n    if (pending) {\n        testObject.setPending();\n    }\n};\n\n/**\n * Checks that a given argument qualifies as a test function\n * @param {*} testFn\n * @return {Boolean}\n */\nconst isTestFn = (testFn) => {\n    if (!testFn) {\n        return false;\n    }\n\n    return typeof testFn.then === 'function' || typeof testFn === 'function';\n};\n\n/**\n * The function used by the consumer\n * @param {String} fieldName name of the field to test against\n * @param {String} [statement] the message shown to the user in case of a failure\n * @param {function | Promise} testFn the actual test callback or promise\n * @param {String} [severity] indicates whether the test should fail or warn\n */\nconst test = (fieldName, ...args) => {\n    let statement,\n        testFn,\n        severity;\n\n    if (typeof args[0] === 'string') {\n        [statement, testFn, severity] = args;\n    } else if (isTestFn(args[0])) {\n        [testFn, severity] = args;\n    }\n\n    if (!isTestFn(testFn)) {\n        return;\n    }\n\n    const testObject = new TestObject(\n        testFn,\n        ctx.parent,\n        fieldName,\n        statement,\n        severity\n    );\n\n    register(testObject);\n\n    return testObject;\n};\n\nexport default test;\n","import { WARN, FAIL } from '../../constants';\nconst severities = [ WARN, FAIL ];\n\nconst passableResult = (name) => {\n\n    const completionCallbacks = [];\n    let asyncObject = null;\n    let hasValidationErrors = false;\n    let hasValidationWarnings = false;\n    let cancelled = false;\n\n    /**\n     * Initializes specific field's counters\n     * @param {string} fieldName - The name of the field.\n     */\n    const initFieldCounters = (fieldName) => {\n        if (output.testsPerformed[fieldName]) { return output; }\n\n        output.testsPerformed[fieldName] = {\n            testCount: 0,\n            failCount: 0,\n            warnCount: 0\n        };\n    };\n\n    /**\n     * Bumps test counters to indicate tests that's being performed\n     * @param {string} fieldName - The name of the field.\n     */\n    const bumpTestCounter = (fieldName) => {\n        if (!output.testsPerformed[fieldName]) { return output; }\n\n        output.testsPerformed[fieldName].testCount++;\n        output.testCount++;\n    };\n\n    /**\n     * Bumps field's warning counts and adds warning string\n     * @param {string} fieldName - The name of the field.\n     * @param {string} statement - The error string to add to the object.\n     */\n    const bumpTestWarning = (fieldName, statement) => {\n        hasValidationWarnings = true;\n        output.warnings[fieldName] = output.warnings[fieldName] || [];\n        output.warnings[fieldName].push(statement);\n        output.warnCount++;\n        output.testsPerformed[fieldName].warnCount++;\n    };\n\n    /**\n     * Bumps field's error counts and adds error string\n     * @param {string} fieldName - The name of the field.\n     * @param {string} statement - The error string to add to the object.\n     */\n    const bumpTestError = (fieldName, statement) => {\n        hasValidationErrors = true;\n        output.errors[fieldName] = output.errors[fieldName] || [];\n        output.errors[fieldName].push(statement);\n        output.failCount++;\n        output.testsPerformed[fieldName].failCount++;\n    };\n\n    /**\n     * Fails a field and updates output accordingly\n     * @param {string} fieldName - The name of the field.\n     * @param {string} statement - The error string to add to the object.\n     * @param {string} severity - Whether it is a `fail` or `warn` test.\n     */\n    const fail = (fieldName, statement, severity) => {\n        if (!output.testsPerformed[fieldName]) { return output; }\n        const selectedSeverity = severity && severities.includes(severity) ? severity : FAIL;\n        selectedSeverity === WARN\n            ? bumpTestWarning(fieldName, statement)\n            : bumpTestError(fieldName, statement);\n    };\n\n    /**\n     * Uniquely add a field to the `skipped` list\n     * @param {string} fieldName - The name of the field.\n     */\n    const addToSkipped = (fieldName) => {\n        !output.skipped.includes(fieldName) && output.skipped.push(fieldName);\n    };\n\n    /**\n     * Runs completion callbacks aggregated by `done`\n     * regardless of success or failure\n     */\n    const runCompletionCallbacks = () => {\n        completionCallbacks.forEach((cb) => !cancelled && cb(output));\n    };\n\n    /**\n     * Marks a field as async\n     * @param {string} fieldName - The name of the field.\n    */\n    const markAsync = (fieldName) => {\n        asyncObject = asyncObject || {};\n        asyncObject[fieldName] = asyncObject[fieldName] || {};\n        asyncObject[fieldName] = {\n            done: false,\n            callbacks: asyncObject[fieldName].callbacks || []\n        };\n    };\n\n    /**\n     * Marks an async field as done\n     * @param {string} fieldName - The name of the field.\n    */\n    const markAsDone = (fieldName) => {\n        if (!fieldName) {\n            return runCompletionCallbacks();\n        }\n\n        if (asyncObject !== null && asyncObject[fieldName]) {\n            asyncObject[fieldName].done = true;\n\n            // run field callbacks set in `after`\n            if (asyncObject[fieldName].callbacks) {\n                asyncObject[fieldName].callbacks.forEach((callback) => !cancelled && callback(output));\n            }\n        }\n    };\n\n    /**\n     * Registers callback functions to be run when test suite is done running\n     * If current suite is not async, runs the callback immediately\n     * @param {function} callback the function to be called on done\n     * @return {object} output object\n     */\n    const done = (callback) => {\n        if (typeof callback !== 'function') {return output;}\n        if (!asyncObject) {\n            callback(output);\n        }\n\n        completionCallbacks.push(callback);\n\n        return output;\n    };\n\n    /**\n     * Registers callback functions to be run when a certain field is done running\n     * If field is not async, runs the callback immediately\n     * @param {string} fieldName - The name of the field.\n     * @param {function} callback the function to be called on done\n     * @return {object} output object\n     */\n    const after = (fieldName, callback) => {\n        if (typeof callback !== 'function') {\n            return output;\n        }\n\n        asyncObject = asyncObject || {};\n        if (!asyncObject[fieldName] && output.testsPerformed[fieldName]) {\n            callback(output);\n        } else if (asyncObject[fieldName]) {\n            asyncObject[fieldName].callbacks = [...(asyncObject[fieldName].callbacks || []), callback];\n        }\n\n        return output;\n    };\n\n    /**\n     * cancels done/after callbacks. They won't invoke when async operations complete\n     */\n    const cancel = () => {\n        cancelled = true;\n\n        return output;\n    };\n\n    /**\n     * Gets all the errors of a field, or of the whole object\n     * @param {string} fieldName - The name of the field.\n     * @return {array | object} The field's errors, or all errors\n     */\n    const getErrors = (fieldName) => {\n        if (!fieldName) {\n            return output.errors;\n        }\n\n        if (output.errors[fieldName]) {\n            return output.errors[fieldName];\n        }\n\n        return [];\n    };\n\n    /**\n     * Gets all the warnings of a field, or of the whole object\n     * @param {string} [fieldName] - The name of the field.\n     * @return {array | object} The field's warnings, or all warnings\n     */\n    const getWarnings = (fieldName) => {\n        if (!fieldName) {\n            return output.warnings;\n        }\n\n        if (output.warnings[fieldName]) {\n            return output.warnings[fieldName];\n        }\n\n        return [];\n    };\n\n    /**\n     * Checks if a certain field (or the whole suite) has errors\n     * @param {string} [fieldName]\n     * @return {boolean}\n     */\n    const hasErrors = (fieldName) => {\n        if (!fieldName) {\n            return hasValidationErrors;\n        }\n\n        return Boolean(output.getErrors(fieldName).length);\n    };\n\n    /**\n     * Checks if a certain field (or the whole suite) has warnings\n     * @param {string} [fieldName] - The name of the field.\n     * @return {boolean}\n     */\n    const hasWarnings = (fieldName) => {\n        if (!fieldName) {\n            return hasValidationWarnings;\n        }\n\n        return Boolean(output.getWarnings(fieldName).length);\n    };\n\n    const output = {\n        name,\n        failCount: 0,\n        warnCount: 0,\n        testCount: 0,\n        testsPerformed: {},\n        errors: {},\n        warnings: {},\n        skipped: []\n    };\n\n    Object.defineProperties(output, {\n        hasErrors: {\n            value: hasErrors,\n            writable: true,\n            configurable: true,\n            enumerable: false\n        },\n        hasWarnings: {\n            value: hasWarnings,\n            writable: true,\n            configurable: true,\n            enumerable: false\n        },\n        getErrors: {\n            value: getErrors,\n            writable: true,\n            configurable: true,\n            enumerable: false\n        },\n        getWarnings: {\n            value: getWarnings,\n            writable: true,\n            configurable: true,\n            enumerable: false\n        },\n        done: {\n            value: done,\n            writable: true,\n            configurable: true,\n            enumerable: false\n        },\n        after: {\n            value: after,\n            writable: true,\n            configurable: true,\n            enumerable: false\n        },\n        cancel: {\n            value: cancel,\n            writable: true,\n            configurable: true,\n            enumerable: false\n        }\n    });\n\n    return {\n        initFieldCounters,\n        bumpTestError,\n        bumpTestWarning,\n        bumpTestCounter,\n        fail,\n        addToSkipped,\n        runCompletionCallbacks,\n        markAsync,\n        markAsDone,\n        output\n    };\n};\n\nexport default passableResult;\n","export const WARN = 'warn';\nexport const FAIL = 'fail';\n","/** Class representing validation inclusion and exclusion groups */\nclass Specific {\n\n    /**\n     * Initialize Specific object\n     *\n     * @param {String | Array | Object | undefined} specific\n     */\n    constructor(specific) {\n\n        if (!specific) { return; }\n\n        if (!Specific.is(specific)) {\n            throw new TypeError();\n        }\n\n        if (typeof specific === 'string' || Array.isArray(specific)) {\n            if (specific.length === 0) { return; }\n            this.only = this.populateGroup(this.only, specific);\n            return;\n        }\n\n        if (specific.only) {\n            this.only = this.populateGroup(this.only, specific.only);\n        }\n\n        if (specific.not) {\n            this.not = this.populateGroup(this.not, specific.not);\n        }\n    }\n\n    /**\n     * Populate inclusion and exclusion groups\n     *\n     * @param {Object} group - the group to populate.\n     * @param {String | Array} field - the field to add to the group\n     * @return {Object} modified group\n     */\n    populateGroup(group, field) {\n        group = group || {};\n\n        if (typeof field === 'string') {\n            group[field] = true;\n        } else if (Array.isArray(field)) {\n            field.forEach((item) => group[item] = true);\n        }\n\n        return group;\n    }\n\n    /**\n     * Checkes whether a given field name is in exclusion group\n     * or not a member of inclusion group (when present)\n     *\n     * @param {String} fieldName\n     * @return {Boolean}\n     */\n    excludes(fieldName) {\n        if (this.only && !this.only[fieldName]) {\n            return true;\n        }\n\n        if (this.not && this.not[fieldName]) {\n            return true;\n        }\n\n        return false;\n    }\n\n    /**\n     * Test whether a given argument matches\n     * the `specific` filter convention\n     *\n     * @param {Any} item\n     * @return {boolean}\n     */\n    static is(item) {\n        if (Array.isArray(item)) {\n            return item.every((item) => typeof item === 'string');\n        }\n\n        if (typeof item === 'string') { return true; }\n\n        if (item !== null && typeof item === 'object' && (\n            item.hasOwnProperty('only')\n            || item.hasOwnProperty('not')\n        )) {\n            return true;\n        }\n\n        return false;\n    }\n}\n\nexport default Specific;","import ctx from '../context';\nimport test, { runAsync } from '../test';\nimport passableResult from '../passableResult';\nimport Specific from '../Specific';\n\nconst initError = (name, value, doc) => `[Passable]: failed during suite initialization. Unexpected '${typeof value}' for '${name}' argument.\n    See: ${doc ? doc : 'https://fiverr.github.io/passable/getting_started/writing_tests.html'}`;\n\nconst passable = (name, tests, specific) => {\n\n    if (typeof name !== 'string') {\n        throw new TypeError(initError('suite name', name));\n    }\n\n    if (typeof tests !== 'function') {\n        throw new TypeError(initError('tests', tests));\n    }\n\n    if (specific && !Specific.is(specific)) {\n        throw new TypeError(initError('specific', tests, 'https://fiverr.github.io/passable/test/specific.html'));\n    }\n\n    const result = passableResult(name);\n\n    const pending = [];\n\n    const parent = {\n        specific: new Specific(specific),\n        result,\n        pending\n    };\n\n    ctx.set(parent);\n\n    tests(test, result.output);\n    ctx.set(null);\n\n    [...pending].forEach(runAsync);\n\n    return result.output;\n};\n\nexport default passable;\n","!function(n,e){\"object\"==typeof exports&&\"undefined\"!=typeof module?module.exports=e():\"function\"==typeof define&&define.amd?define(e):(n=n||self).enforce=e()}(this,function(){\"use strict\";function n(e){return(n=\"function\"==typeof Symbol&&\"symbol\"==typeof Symbol.iterator?function(n){return typeof n}:function(n){return n&&\"function\"==typeof Symbol&&n.constructor===Symbol&&n!==Symbol.prototype?\"symbol\":typeof n})(e)}function e(n,e,t){return e in n?Object.defineProperty(n,e,{value:t,enumerable:!0,configurable:!0,writable:!0}):n[e]=t,n}function t(n,e){var t=Object.keys(n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(n);e&&(r=r.filter(function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable})),t.push.apply(t,r)}return t}function r(n){for(var r=1;r<arguments.length;r++){var o=null!=arguments[r]?arguments[r]:{};r%2?t(o,!0).forEach(function(t){e(n,t,o[t])}):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(o)):t(o).forEach(function(e){Object.defineProperty(n,e,Object.getOwnPropertyDescriptor(o,e))})}return n}var o=function(n,e){return Object.prototype.hasOwnProperty.call(n,e)&&\"function\"==typeof n[e]},u=Function(\"return this\")(),i=function(){return\"function\"==typeof u.Proxy};function a(n){return Boolean(Array.isArray(n))}function c(n){return Boolean(\"number\"==typeof n)}function f(n){return Boolean(\"string\"==typeof n)}function s(n,e){return e instanceof RegExp?e.test(n):\"string\"==typeof e&&new RegExp(e).test(n)}function l(e,t){return Array.isArray(t)&&[\"string\",\"number\",\"boolean\"].includes(n(e))?t.includes(e):\"string\"==typeof t&&\"string\"==typeof e&&t.includes(e)}function y(n,e){return n===e}function p(n){var e=!isNaN(parseFloat(n))&&!isNaN(Number(n))&&isFinite(n);return Boolean(e)}function g(n,e){return p(n)&&p(e)&&Number(n)===Number(e)}function b(e){return!e||(p(e)?0===e:Object.prototype.hasOwnProperty.call(e,\"length\")?0===e.length:\"object\"!==n(e)||0===Object.keys(e).length)}function m(n,e){return p(n)&&p(e)&&Number(n)>Number(e)}function v(n,e){return p(n)&&p(e)&&Number(n)>=Number(e)}function h(n,e){return p(n)&&p(e)&&Number(n)<Number(e)}function O(n,e){return p(n)&&p(e)&&Number(n)<=Number(e)}function N(n,e){return n.length===e}a.negativeForm=\"isNotArray\",c.negativeForm=\"isNotNumber\",f.negativeForm=\"isNotString\",s.negativeForm=\"notMatches\",l.negativeForm=\"notInside\",y.negativeForm=\"notEquals\",p.negativeForm=\"isNotNumeric\",g.negativeForm=\"numberNotEquals\",b.negativeForm=\"isNotEmpty\",m.alias=\"gt\",v.alias=\"gte\",h.alias=\"lt\",O.alias=\"lte\",N.negativeForm=\"lengthNotEquals\";var d=function(n){var e=function(e){var t=n[e].negativeForm,r=n[e].alias;t&&(n[t]=function(){return!n[e].apply(n,arguments)}),r&&(n[r]=n[e])};for(var t in n)e(t);return n}({isArray:a,isNumber:c,isString:f,matches:s,inside:l,equals:y,numberEquals:g,isNumeric:p,isEmpty:b,greaterThan:m,greaterThanOrEquals:v,lessThan:h,lessThanOrEquals:O,longerThan:function(n,e){return n.length>e},longerThanOrEquals:function(n,e){return n.length>=e},shorterThan:function(n,e){return n.length<e},shorterThanOrEquals:function(n,e){return n.length<=e},lengthEquals:N,isOdd:function(n){return!!p(n)&&n%2!=0},isEven:function(n){return!!p(n)&&n%2==0}});function E(e,t){if(\"function\"==typeof e){for(var r=arguments.length,o=new Array(r>2?r-2:0),u=2;u<r;u++)o[u-2]=arguments[u];if(!0!==e.apply(void 0,[t].concat(o)))throw new Error(\"[Enforce]: invalid \".concat(n(t),\" value\"))}}function j(){var n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=r({},d,{},n);if(i())return function(n){var e=new Proxy(t,{get:function(t,r){if(o(t,r))return function(){for(var o=arguments.length,u=new Array(o),i=0;i<o;i++)u[i]=arguments[i];return E.apply(void 0,[t[r],n].concat(u)),e}}});return e};var u=Object.keys(t);return function(n){return u.reduce(function(u,i){return Object.assign(u,r({},o(t,i)&&e({},i,function(){for(var e=arguments.length,r=new Array(e),o=0;o<e;o++)r[o]=arguments[o];return E.apply(void 0,[t[i],n].concat(r)),u})))},{})}}var w=new j;return w.Enforce=j,w});\n","(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :\n    typeof define === 'function' && define.amd ? define(factory) :\n    (global = global || self, global.any = factory());\n}(this, function () { 'use strict';\n\n    /**\n     * Accepts a value or a function, and coerces it into a boolean value\n     * @param {*|Function} [arg] Any expression or value\n     * @return {Boolean}\n     */\n    var run = function run(arg) {\n      if (typeof arg === 'function') {\n        try {\n          var output = arg();\n          return output != false && Boolean(output);\n        } catch (err) {\n          return false;\n        }\n      }\n\n      return arg != false && Boolean(arg);\n    };\n\n    /**\n     * Checks that at least one passed argument evaluates to a truthy value.\n     * @param  {[]*} [args] Any amount of values or expressions.\n     * @returns {Boolean}\n     */\n\n    var any = function any() {\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      return args.some(run);\n    };\n\n    return any;\n\n}));\n","import passable from './core/passable';\nimport test from './core/test';\nimport validate from './utilities/validate';\nimport { WARN, FAIL } from './constants';\nimport enforce from 'n4s/dist/enforce.min';\nimport any from 'anyone/any'\n\npassable.VERSION = PASSABLE_VERSION;\npassable.enforce = enforce;\npassable.Enforce = enforce.Enforce;\npassable.test = test;\npassable.validate = validate;\npassable.any = any;\npassable.WARN = WARN;\npassable.FAIL = FAIL;\n\nexport default passable;\n","/**\n * Run tests and catch errors\n *\n * @param {function} callback The test content\n * @return {boolean}\n */\nfunction validate(test) {\n\n    if (typeof test !== 'function' && !(test instanceof Promise)) {\n        throw new TypeError(`[Validate]: expected ${typeof test} to be a function.`);\n    }\n\n    try {\n        return test() !== false;\n    } catch (_) {\n        return false;\n    }\n}\n\nexport default validate;\n"],"names":["Context","prototype","set","parent","this","context","TestObject","testFn","fieldName","statement","severity","valueOf","isValid","fail","result","setPending","pending","push","runAsync","testObject","markAsync","done","clearPendingTest","hasRemainingPendingTests","markAsDone","rejectionMessage","includes","then","e","filter","t","length","some","register","specific","excludes","addToSkipped","initFieldCounters","bumpTestCounter","preRun","isTestFn","test","args","ctx","severities","Specific","is","TypeError","Array","isArray","only","populateGroup","not","item","every","_typeof","hasOwnProperty","group","field","forEach","initError","name","value","doc","passable","tests","completionCallbacks","asyncObject","hasValidationErrors","hasValidationWarnings","cancelled","bumpTestWarning","output","warnings","warnCount","testsPerformed","bumpTestError","errors","failCount","runCompletionCallbacks","cb","testCount","skipped","Object","defineProperties","hasErrors","Boolean","getErrors","writable","configurable","enumerable","hasWarnings","getWarnings","callback","after","callbacks","cancel","passableResult","module","n","Symbol","iterator","constructor","defineProperty","keys","getOwnPropertySymbols","r","getOwnPropertyDescriptor","apply","arguments","o","getOwnPropertyDescriptors","call","u","Function","i","Proxy","a","c","f","s","RegExp","l","y","p","isNaN","parseFloat","Number","isFinite","g","b","m","v","h","O","N","negativeForm","alias","d","isNumber","isString","matches","inside","equals","numberEquals","isNumeric","isEmpty","greaterThan","greaterThanOrEquals","lessThan","lessThanOrEquals","longerThan","longerThanOrEquals","shorterThan","shorterThanOrEquals","lengthEquals","isOdd","isEven","E","concat","Error","j","get","reduce","_extends","w","Enforce","run","arg","err","_len","_key","VERSION","PASSABLE_VERSION","enforce","validate","Promise","_","any","WARN","FAIL"],"mappings":"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"}