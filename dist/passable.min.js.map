{"version":3,"sources":["webpack://passable/webpack/universalModuleDefinition","webpack://passable/webpack/bootstrap","webpack://passable/./node_modules/proxy-polyfill/src/proxy.js","webpack://passable/./src/core/ResultObject/index.js","webpack://passable/./src/core/Specific/index.js","webpack://passable/./src/core/Passable/index.js","webpack://passable/./src/core/testRunner/index.js","webpack://passable/./src/Enforce/runnables/compounds/index.js","webpack://passable/./src/Enforce/runnables/compounds/all_of/index.js","webpack://passable/./src/Enforce/runnables/compounds/any_of/index.js","webpack://passable/./src/Enforce/runnables/compounds/none_of/index.js","webpack://passable/./src/Enforce/runnables/rules/helpers/expect_type/index.js","webpack://passable/./src/Enforce/runnables/rules/helpers/find_array_values_in_array/index.js","webpack://passable/./src/Enforce/runnables/rules/helpers/find_array_values_in_map_keys/index.js","webpack://passable/./src/Enforce/runnables/rules/helpers/find_val_in_array_or_string/index.js","webpack://passable/./src/Enforce/runnables/rules/helpers/get_size/index.js","webpack://passable/./src/Enforce/runnables/rules/helpers/is_type/index.js","webpack://passable/./src/Enforce/runnables/rules/helpers/reduce_array_to_map/index.js","webpack://passable/./src/Enforce/runnables/rules/lang/is_array/index.js","webpack://passable/./src/Enforce/runnables/rules/lang/is_number/index.js","webpack://passable/./src/Enforce/runnables/rules/lang/is_string/index.js","webpack://passable/./src/Enforce/runnables/rules/content/matches/index.js","webpack://passable/./src/Enforce/runnables/rules/content/inside/index.js","webpack://passable/./src/Enforce/runnables/rules/content/is_numeric/index.js","webpack://passable/./src/Enforce/runnables/rules/size/is_empty/index.js","webpack://passable/./src/Enforce/runnables/rules/size/size_equals/index.js","webpack://passable/./src/Enforce/runnables/rules/size/larger_than/index.js","webpack://passable/./src/Enforce/runnables/rules/size/smaller_than/index.js","webpack://passable/./src/Enforce/runnables/rules/size/smaller_than_or_equals/index.js","webpack://passable/./src/Enforce/runnables/rules/size/larger_than_or_equals/index.js","webpack://passable/./src/Enforce/runnables/rules/size/greater_than/index.js","webpack://passable/./src/Enforce/runnables/rules/size/greater_than_or_equals/index.js","webpack://passable/./src/Enforce/runnables/rules/size/less_than/index.js","webpack://passable/./src/Enforce/runnables/rules/size/less_than_or_equals/index.js","webpack://passable/./src/Enforce/runnables/rules/helpers/extend_rules/index.js","webpack://passable/./src/Enforce/runnables/rules/size/longer_than/index.js","webpack://passable/./src/Enforce/runnables/rules/size/longer_than_or_equals/index.js","webpack://passable/./src/Enforce/runnables/rules/size/shorter_than/index.js","webpack://passable/./src/Enforce/runnables/rules/size/shorter_than_or_equals/index.js","webpack://passable/./src/Enforce/runnables/rules/size/length_equals/index.js","webpack://passable/./src/Enforce/runnables/rules/index.js","webpack://passable/./src/Enforce/runners/compound/index.js","webpack://passable/./src/Enforce/runners/rule/index.js","webpack://passable/./src/Enforce/helpers/safe_proxy.js","webpack://passable/./src/Enforce/index.js","webpack://passable/./src/validate/index.js","webpack://passable/./src/index.js"],"names":["root","factory","exports","module","define","amd","Function","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","ProxyPolyfill","lastRevokeFn","isObject","_typeof","target","handler","TypeError","throwRevoked","trap","concat","unsafeHandler","k","set","apply","construct","proxy","this","isMethod","isArray","usingNew","constructor","args","Array","slice","arguments","unshift","prop","setter","propertyNames","getOwnPropertyNames","propertyMap","forEach","desc","getOwnPropertyDescriptor","prototypeOk","setPrototypeOf","getPrototypeOf","__proto__","seal","revocable","revoke","severities","ResultObject","_classCallCheck","_async","writable","_completionCallbacks","hasValidationErrors","hasValidationWarnings","failCount","warnCount","testCount","testsPerformed","validationErrors","validationWarnings","skipped","fieldName","statement","push","severity","includes","bumpTestWarning","bumpTestError","_this","_classPrivateFieldGet","cb","callback","_classPrivateFieldSet","callbacks","_toConsumableArray","done","_this2","Boolean","getErrors","length","getWarnings","Specific","specific","Specific_classCallCheck","is","only","populateGroup","not","item","every","group","field","constructorError","doc","Passable_typeof","Passable","tests","Passable_classCallCheck","_defineProperty","test","pending","filter","res","runCompletionCallbacks","some","excludes","addToSkipped","operation","initFieldCounters","runTest","Promise","addPendingTest","assign","markAsync","clearPendingTest","hasRemainingPendingTests","markAsDone","fail","then","e","testRunnerAsync","isValid","valid","testRunner","bumpTestCounter","Passable_toConsumableArray","runPendingTests","compounds","allOf","rules","validations","keys","run","anyOf","noneOf","expectType","type","functionName","isType","val","JSON","stringify","findArrayValuesInArray","values","array","reducedArray","reduceArrayToMap","findArrayValuesInMapKeys","map","element","has","findValInArrayOrString","container","indexOf","getSize","isNaN","get_size_typeof","_len","types","_key","is_type_typeof","reduce","acc","Map","expect","undefined","negativeForm","isNumber","isString","matches","regex","RegExp","inside","arg1","isNumeric","parseFloat","Number","isFinite","isEmpty","sizeEquals","largerThan","smallerThan","smallerThanOrEquals","largerThanOrEquals","greaterThan","alias","greaterThanOrEquals","lessThan","lessThanOrEquals","extendRules","_loop","rule","longerThan","longerThanOrEquals","shorterThan","shorterThanOrEquals","lengthEquals","compound","allRules","runner","Error","compound_typeof","rule_typeof","glob","safeProxy","Proxy","proxyPolyfill","Enforce","customRules","runnables","allRunnables","fnName","runners","validate","validate_typeof","_","passable","VERSION","PASSABLE_VERSION","enforce","WARN","FAIL"],"mappings":"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","file":"passable.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"passable\"] = factory();\n\telse\n\t\troot[\"passable\"] = factory();\n})(Function('return this')(), function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 1);\n","/*\n * Copyright 2016 Google Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n * use this file except in compliance with the License. You may obtain a copy of\n * the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n * License for the specific language governing permissions and limitations under\n * the License.\n */\n\nmodule.exports = function proxyPolyfill() {\n  let lastRevokeFn = null;\n  let ProxyPolyfill;\n\n  /**\n   * @param {*} o\n   * @return {boolean} whether this is probably a (non-null) Object\n   */\n  function isObject(o) {\n    return o ? (typeof o === 'object' || typeof o === 'function') : false;\n  }\n\n  /**\n   * @constructor\n   * @param {!Object} target\n   * @param {{apply, construct, get, set}} handler\n   */\n  ProxyPolyfill = function(target, handler) {\n    if (!isObject(target) || !isObject(handler)) {\n      throw new TypeError('Cannot create proxy with a non-object as target or handler');\n    }\n\n    // Construct revoke function, and set lastRevokeFn so that Proxy.revocable can steal it.\n    // The caller might get the wrong revoke function if a user replaces or wraps scope.Proxy\n    // to call itself, but that seems unlikely especially when using the polyfill.\n    let throwRevoked = function() {};\n    lastRevokeFn = function() {\n      throwRevoked = function(trap) {\n        throw new TypeError(`Cannot perform '${trap}' on a proxy that has been revoked`);\n      };\n    };\n\n    // Fail on unsupported traps: Chrome doesn't do this, but ensure that users of the polyfill\n    // are a bit more careful. Copy the internal parts of handler to prevent user changes.\n    const unsafeHandler = handler;\n    handler = { 'get': null, 'set': null, 'apply': null, 'construct': null };\n    for (let k in unsafeHandler) {\n      if (!(k in handler)) {\n        throw new TypeError(`Proxy polyfill does not support trap '${k}'`);\n      }\n      handler[k] = unsafeHandler[k];\n    }\n    if (typeof unsafeHandler === 'function') {\n      // Allow handler to be a function (which has an 'apply' method). This matches what is\n      // probably a bug in native versions. It treats the apply call as a trap to be configured.\n      handler.apply = unsafeHandler.apply.bind(unsafeHandler);\n    }\n\n    // Define proxy as this, or a Function (if either it's callable, or apply is set).\n    // TODO(samthor): Closure compiler doesn't know about 'construct', attempts to rename it.\n    let proxy = this;\n    let isMethod = false;\n    let isArray = false;\n    if (typeof target === 'function') {\n      proxy = function ProxyPolyfill() {\n        const usingNew = (this && this.constructor === proxy);\n        const args = Array.prototype.slice.call(arguments);\n        throwRevoked(usingNew ? 'construct' : 'apply');\n\n        if (usingNew && handler['construct']) {\n          return handler['construct'].call(this, target, args);\n        } else if (!usingNew && handler.apply) {\n          return handler.apply(target, this, args);\n        }\n\n        // since the target was a function, fallback to calling it directly.\n        if (usingNew) {\n          // inspired by answers to https://stackoverflow.com/q/1606797\n          args.unshift(target);  // pass class as first arg to constructor, although irrelevant\n          // nb. cast to convince Closure compiler that this is a constructor\n          const f = /** @type {!Function} */ (target.bind.apply(target, args));\n          return new f();\n        }\n        return target.apply(this, args);\n      };\n      isMethod = true;\n    } else if (target instanceof Array) {\n      proxy = [];\n      isArray = true;\n    }\n\n    // Create default getters/setters. Create different code paths as handler.get/handler.set can't\n    // change after creation.\n    const getter = handler.get ? function(prop) {\n      throwRevoked('get');\n      return handler.get(this, prop, proxy);\n    } : function(prop) {\n      throwRevoked('get');\n      return this[prop];\n    };\n    const setter = handler.set ? function(prop, value) {\n      throwRevoked('set');\n      const status = handler.set(this, prop, value, proxy);\n      // TODO(samthor): If the calling code is in strict mode, throw TypeError.\n      // if (!status) {\n        // It's (sometimes) possible to work this out, if this code isn't strict- try to load the\n        // callee, and if it's available, that code is non-strict. However, this isn't exhaustive.\n      // }\n    } : function(prop, value) {\n      throwRevoked('set');\n      this[prop] = value;\n    };\n\n    // Clone direct properties (i.e., not part of a prototype).\n    const propertyNames = Object.getOwnPropertyNames(target);\n    const propertyMap = {};\n    propertyNames.forEach(function(prop) {\n      if ((isMethod || isArray) && prop in proxy) {\n        return;  // ignore properties already here, e.g. 'bind', 'prototype' etc\n      }\n      const real = Object.getOwnPropertyDescriptor(target, prop);\n      const desc = {\n        enumerable: !!real.enumerable,\n        get: getter.bind(target, prop),\n        set: setter.bind(target, prop),\n      };\n      Object.defineProperty(proxy, prop, desc);\n      propertyMap[prop] = true;\n    });\n\n    // Set the prototype, or clone all prototype methods (always required if a getter is provided).\n    // TODO(samthor): We don't allow prototype methods to be set. It's (even more) awkward.\n    // An alternative here would be to _just_ clone methods to keep behavior consistent.\n    let prototypeOk = true;\n    if (Object.setPrototypeOf) {\n      Object.setPrototypeOf(proxy, Object.getPrototypeOf(target));\n    } else if (proxy.__proto__) {\n      proxy.__proto__ = target.__proto__;\n    } else {\n      prototypeOk = false;\n    }\n    if (handler.get || !prototypeOk) {\n      for (let k in target) {\n        if (propertyMap[k]) {\n          continue;\n        }\n        Object.defineProperty(proxy, k, { get: getter.bind(target, k) });\n      }\n    }\n\n    // The Proxy polyfill cannot handle adding new properties. Seal the target and proxy.\n    Object.seal(target);\n    Object.seal(proxy);\n\n    return proxy;  // nb. if isMethod is true, proxy != this\n  };\n\n  ProxyPolyfill.revocable = function(target, handler) {\n    const p = new ProxyPolyfill(target, handler);\n    return { 'proxy': p, 'revoke': lastRevokeFn };\n  };\n\n  return ProxyPolyfill;\n}","// @flow\n\nexport const WARN: Severity = 'warn';\nexport const FAIL: Severity = 'fail';\nconst severities: Array<Severity> = [WARN, FAIL];\n\n/** Class representing validation state. */\nclass ResultObject {\n\n    /**\n     * Initialize validation object\n     * @param {string} name - The name of the current data object.\n     * @return {Object} Current instance\n     */\n    constructor(name: string) {\n        this.name = name;\n        this.hasValidationErrors = false;\n        this.hasValidationWarnings = false;\n        this.failCount = 0;\n        this.warnCount = 0;\n        this.testCount = 0;\n        this.testsPerformed = {};\n        this.validationErrors = {};\n        this.validationWarnings = {};\n        this.skipped = [];\n    }\n\n    #async: AsyncObject = null;\n    #completionCallbacks: Array<Function> = [];\n\n    /**\n     * Initializes specific field's counters\n     * @param {string} fieldName - The name of the field.\n     * @return {Object} Current instance\n     */\n    initFieldCounters(fieldName: string) {\n        if (this.testsPerformed[fieldName]) { return this; }\n\n        this.testsPerformed[fieldName] = {\n            testCount: 0,\n            failCount: 0,\n            warnCount: 0\n        };\n\n        return this;\n    }\n\n    /**\n     * Bumps test counters\n     * @param {string} fieldName - The name of the field.\n     * @return {Object} Current instance\n     */\n    bumpTestCounter(fieldName: string) {\n        if (!this.testsPerformed[fieldName]) { return this; }\n\n        this.testsPerformed[fieldName].testCount++;\n        this.testCount++;\n\n        return this;\n    }\n\n    /**\n     * Bumps field's warning counts and adds warning string\n     * @param {string} fieldName - The name of the field.\n     * @param {string} statement - The error string to add to the object.\n     */\n    bumpTestWarning(fieldName: string, statement: string) {\n        this.hasValidationWarnings = true;\n        this.validationWarnings[fieldName] = this.validationWarnings[fieldName] || [];\n        this.validationWarnings[fieldName].push(statement);\n        this.warnCount++;\n        this.testsPerformed[fieldName].warnCount++;\n    }\n\n    /**\n     * Bumps field's error counts and adds error string\n     * @param {string} fieldName - The name of the field.\n     * @param {string} statement - The error string to add to the object.\n     */\n    bumpTestError(fieldName: string, statement: string) {\n        this.hasValidationErrors = true;\n        this.validationErrors[fieldName] = this.validationErrors[fieldName] || [];\n        this.validationErrors[fieldName].push(statement);\n        this.failCount++;\n        this.testsPerformed[fieldName].failCount++;\n    }\n\n    /**\n     * Fails a field and updates object accordingly\n     * @param {string} fieldName - The name of the field.\n     * @param {string} statement - The error string to add to the object.\n     * @param {string} severity - Whether it is a `fail` or `warn` test.\n     * @return {Object} Current instance\n     */\n    fail(fieldName: string, statement: string, severity: Severity) {\n        if (!this.testsPerformed[fieldName]) { return this; }\n\n        const selectedSeverity: Severity = severity && severities.includes(severity) ? severity : FAIL;\n\n        selectedSeverity === WARN\n            ? this.bumpTestWarning(fieldName, statement)\n            : this.bumpTestError(fieldName, statement);\n\n        return this;\n    }\n\n    /**\n     * Uniquely add a field to the `skipped` list\n     * @param {string} fieldName\n     * @return {Object} Current instance\n     */\n    addToSkipped(fieldName: string): this {\n        !this.skipped.includes(fieldName) && this.skipped.push(fieldName);\n\n        return this;\n    }\n\n    /**\n     * Runs completion callbacks aggregated by `done`\n     * regardless of success or failure\n     */\n    runCompletionCallbacks() {\n        this.#completionCallbacks.forEach((cb) => cb(this));\n    }\n\n    /**\n     * Registers callback function to be run when test suite is done running\n     * If current suite is not async, runs the callback immediately\n     * @param {Function} callback the function to be called on done\n     * @return {Object} Current instance\n     */\n    done(callback: Function) {\n        if (typeof callback !== 'function') {return this;}\n\n        if (!this.#async) {\n            callback(this);\n        }\n\n        this.#completionCallbacks.push(callback);\n        return this;\n    }\n\n    /**\n     * Registers a callback function to be run after a certain field finished running\n     * If given field is sync, runs immediately\n     * @param {String} fieldName name of the field to register the callback to\n     * @param {Function} callback the function to be registered\n     * @return {Object} Current instance\n     */\n    after(fieldName: string, callback: Function) {\n\n        if (typeof callback !== 'function') {\n            return this;\n        }\n\n        this.#async = this.#async || {};\n\n        if (!this.#async[fieldName] && this.testsPerformed[fieldName]) {\n            callback(this);\n        } else if (this.#async[fieldName]) {\n            this.#async[fieldName].callbacks = [...(this.#async[fieldName].callbacks || []), callback];\n        }\n\n        return this;\n    }\n\n    /**\n     * Marks a field as async\n     * @param {string} fieldName the name of the field marked as async\n     * @return {Object} Current instance\n    */\n    markAsync(fieldName: string) {\n        this.#async = this.#async || {};\n        this.#async[fieldName] = { done: false };\n        return this;\n    }\n\n    /**\n     * Marks an async field as done\n     * @param {string} fieldName the name of the field marked as done\n     * @return {Object} Current instance\n    */\n    markAsDone(fieldName: string) {\n        if (this.#async !== null && this.#async[fieldName]) {\n            this.#async[fieldName].done = true;\n\n            // run field callbacks set in `after`\n            if (this.#async[fieldName].callbacks) {\n                this.#async[fieldName].callbacks.forEach((callback) => callback(this));\n            }\n        }\n\n        return this;\n    }\n\n    /**\n     * Gets all the errors of a field, or of the whole object\n     * @param {string} [fieldName] - The name of the field.\n     * @return {Array | Object} The field's errors, or all errors\n     */\n    getErrors(fieldName: string): Array<string> | ErrorAndWarningObject {\n        if (!fieldName) {\n            return this.validationErrors;\n        }\n\n        if (this.validationErrors[fieldName]) {\n            return this.validationErrors[fieldName];\n        }\n\n        return [];\n    }\n\n    /**\n     * Gets all the warnings of a field, or of the whole object\n     * @param {string} [fieldName] - The name of the field.\n     * @return {Array | Object} The field's warnings, or all warnings\n     */\n    getWarnings(fieldName: string): Array<string> | ErrorAndWarningObject {\n        if (!fieldName) {\n            return this.validationWarnings;\n        }\n\n        if (this.validationWarnings[fieldName]) {\n            return this.validationWarnings[fieldName];\n        }\n\n        return [];\n    }\n\n    /**\n     * Returns whether a field (or the whole suite, if none passed) contains errors\n     * @param {string} [fieldName]\n     */\n    hasErrors(fieldName: string): boolean {\n        if (!fieldName) {\n            return this.hasValidationErrors;\n        }\n\n        return Boolean(this.getErrors(fieldName).length);\n    }\n\n    /**\n     * Returns whether a field (or the whole suite, if none passed) contains warnings\n     * @param {string} [fieldName]\n     */\n    hasWarnings(fieldName: string): boolean {\n        if (!fieldName) {\n            return this.hasValidationWarnings;\n        }\n\n        return Boolean(this.getWarnings(fieldName).length);\n    }\n\n    name: string;\n    hasValidationErrors: boolean;\n    hasValidationWarnings: boolean;\n    failCount: number;\n    warnCount: number;\n    testCount: number;\n    validationErrors: ErrorAndWarningObject;\n    validationWarnings: ErrorAndWarningObject;\n    testsPerformed: {\n        [name: string]: {\n            testCount: number,\n            failCount: number,\n            warnCount: number\n        }\n    };\n    skipped: Array<string>;\n    fail: Function;\n}\n\nexport default ResultObject;","// @flow\n\n/** Class representing validation inclusion and exclusion groups */\nclass Specific {\n    not: SpecificGroup;\n    only: SpecificGroup;\n\n    /**\n     * Initialize Specific object\n     *\n     * @param {String | Array | Object | undefined} specific\n     */\n    constructor(specific: ?SpecificArgs) {\n\n        if (!specific) { return; }\n\n        if (!Specific.is(specific)) {\n            throw new TypeError();\n        }\n\n        if (typeof specific === 'string' || Array.isArray(specific)) {\n            if (specific.length === 0) { return; }\n            this.only = this.populateGroup(this.only, specific);\n            return;\n        }\n\n        if (specific.only) {\n            this.only = this.populateGroup(this.only, specific.only);\n        }\n\n        if (specific.not) {\n            this.not = this.populateGroup(this.not, specific.not);\n        }\n    }\n\n    /**\n     * Populate inclusion and exclusion groups\n     *\n     * @param {Object} group - the group to populate.\n     * @param {String | Array} field - the field to add to the group\n     * @return {Object} modified group\n     */\n    populateGroup(group: SpecificGroup, field: SpecificField) {\n        group = group || {};\n\n        if (typeof field === 'string') {\n            group[field] = true;\n        } else if (Array.isArray(field)) {\n            field.forEach((item) => group[item] = true);\n        }\n\n        return group;\n    }\n\n    /**\n     * Checkes whether a given field name is in exclusion group\n     * or not a member of inclusion group (when present)\n     *\n     * @param {String} fieldName\n     * @return {Boolean}\n     */\n    excludes(fieldName: string) {\n        if (this.only && !this.only[fieldName]) {\n            return true;\n        }\n\n        if (this.not && this.not[fieldName]) {\n            return true;\n        }\n\n        return false;\n    }\n\n    /**\n     * Test whether a given argument matches\n     * the `specific` filter convention\n     *\n     * @param {Any} item\n     * @return {boolean}\n     */\n    static is(item: AnyValue) {\n        if (Array.isArray(item)) {\n            return item.every((item) => typeof item === 'string');\n        }\n\n        if (typeof item === 'string') { return true; }\n\n        if (item !== null && typeof item === 'object' && (\n            item.hasOwnProperty('only')\n            || item.hasOwnProperty('not')\n        )) {\n            return true;\n        }\n\n        return false;\n    }\n}\n\nexport default Specific;","// @flow\n\nimport { testRunner, testRunnerAsync } from '../testRunner';\nimport ResultObject from '../ResultObject';\nimport Specific from '../Specific';\n\nconst constructorError: Function = (name: string, value: string, doc?: string): string => `[Passable]: failed during suite initialization. Unexpected '${typeof value}' for '${name}' argument.\n    See: ${doc ? doc : 'https://fiverr.github.io/passable/getting_started/writing_tests.html'}`;\n\n/**\n * Describes a passable validation suite\n */\nclass Passable {\n    specific: Specific;\n    res: ResultObject;\n    test: TestProvider;\n    pending: Array<PassableTest>;\n\n    pending = [];\n\n    /**\n     * Initializes a validation suite, creates a new ResultObject instance and runs pending tests\n     */\n    constructor(name: string, tests: TestsWrapper, specific: ?SpecificArgs) {\n\n        if (typeof name !== 'string') {\n            throw new TypeError(constructorError('suite name', name));\n        }\n\n        if (typeof tests !== 'function') {\n            throw new TypeError(constructorError('tests', tests));\n        }\n\n        if (specific && !Specific.is(specific)) {\n            throw new TypeError(constructorError('specific', tests, 'https://fiverr.github.io/passable/test/specific.html'));\n        }\n\n        this.specific = new Specific(specific);\n\n        this.res = new ResultObject(name);\n\n        tests(this.test, this.res);\n        this.runPendingTests();\n    }\n\n    addPendingTest = (test: PassableTest) => this.pending.push(test);\n\n    clearPendingTest = (test: PassableTest) => {\n        this.pending = (this.pending.filter((t: PassableTest): boolean => t !== test): Array<PassableTest>);\n        if (this.pending.length === 0) {\n            this.res.runCompletionCallbacks();\n        }\n    };\n\n    /**\n     * Checks if a given field name still has pending tests\n     * @param {String} fieldName name of the field to test against\n     * @return {Boolean}\n     */\n    hasRemainingPendingTests = (fieldName: string) => this.pending.some((test) => test.fieldName === fieldName);\n\n    /**\n     * Test function passed over to the consumer.\n     * It initiates field validation, and adds te test to the pending tests list\n     * @param {string} fieldName the name of the field being validated\n     * @param {string} statement description of the test\n     * @param {function | Promise} test the actual test callback or promise\n     */\n    test = (fieldName: string, statement: string, test: PassableTest, severity: Severity) => {\n\n        if (this.specific.excludes(fieldName)) {\n            this.res.addToSkipped(fieldName);\n            return;\n        }\n\n        this.res.initFieldCounters(fieldName);\n\n        let operation: Function;\n\n        if (typeof test === 'function') {\n            operation = this.runTest;\n        } else if (test instanceof Promise) {\n            operation = this.addPendingTest;\n        } else {\n            return;\n        }\n\n        operation(Object.assign(test, {\n            fieldName,\n            statement,\n            severity\n        }));\n    }\n\n    /**\n     * calls `runTest` on all pending tests, clears pending tests list and bumps counters\n     * @param {function | Promise} test the actual test callback or promise\n     */\n    runTest = (test: PassableTest) => {\n        if (test instanceof Promise) {\n\n            this.res.markAsync(test.fieldName);\n\n            const done: Function = () => {\n                this.clearPendingTest(test);\n                if (!this.hasRemainingPendingTests(test.fieldName)) {\n                    this.res.markAsDone(test.fieldName);\n                }\n            };\n\n            const fail: Function = () => {\n                // order is important here! fail needs to be called before `done`.\n                this.res.fail(test.fieldName, test.statement, test.severity);\n                done();\n            };\n\n            testRunnerAsync(test, done, fail);\n        } else {\n            const isValid: boolean = testRunner(test);\n\n            if (!isValid) {\n                this.res.fail(test.fieldName, test.statement, test.severity);\n            }\n            this.clearPendingTest(test);\n        }\n        this.res.bumpTestCounter(test.fieldName);\n    }\n\n    /**\n     * calls `runTest` on all pending tests, clears pending tests list and bumps counters\n     */\n    runPendingTests = () => {\n        [...this.pending].forEach(this.runTest);\n    }\n}\n\nexport default Passable;","// @flow\nfunction testRunner(test: Function): boolean {\n\n    let isValid: null | boolean = null;\n\n    try {\n        const res: testRunnerCallback = test();\n\n        if (typeof res !== 'undefined' && res !== null && res.hasOwnProperty('valid')) {\n            isValid = res.valid;\n        } else if (typeof res === 'boolean') {\n            isValid = res || false;\n        } else {\n            isValid = true;\n        }\n    } catch (e) {\n        isValid = false;\n    }\n\n    return !!isValid;\n}\n\nfunction testRunnerAsync(test: Function, done: Function, fail: Function): void {\n    try {\n        test.then(done, fail);\n    } catch (e) {\n        fail();\n    }\n}\n\nexport { testRunnerAsync, testRunner };","// @flow\nimport allOf from './all_of';\nimport anyOf from './any_of';\nimport noneOf from './none_of';\n\nexport const compounds: {[name: string]: Function} = {\n    allOf,\n    anyOf,\n    noneOf\n};\n\n/**\n * A function which returns whether a combination of\n * rule + value is true or false\n *\n * @param {any} value - the value being tested\n * @param {string} key the name of the rule being run\n * @param {Object} tests an object containing the group of tests in the current run\n * @param {Object} rules an object containing all the rules available for the current test\n * @return {boolean} value validation result\n */\n\nexport default function run(value: AnyValue, key: string, tests: CompoundTestObject, rules: EnforceRules): boolean {\n\n    if (typeof rules[key] !== 'function') {\n        if (typeof tests[key] === 'function') {\n            return tests[key](value);\n        }\n\n        return false;\n    }\n\n    const args: mixed = tests[key];\n\n    return rules[key](value, args);\n}","// @flow\nimport run from '../';\n\nexport default function allOf(value: mixed, tests: CompoundTestObject, rules: EnforceRules): boolean {\n\n    const validations: Array<string> = Object.keys(tests);\n\n    if (validations.length === 0) {\n        return false;\n    }\n\n    return validations.every((key) => run(value, key, tests, rules) === true);\n}","// @flow\nimport run from '../';\n\nexport default function anyOf(value: mixed, tests: CompoundTestObject, rules: EnforceRules): boolean {\n\n    const validations: Array<string> = Object.keys(tests);\n    return validations.some((key) => run(value, key, tests, rules) === true);\n}\n","// @flow\nimport run from '../';\n\nexport default function noneOf(value: mixed, tests: CompoundTestObject, rules: EnforceRules): boolean {\n\n    const validations: Array<string> = Object.keys(tests);\n\n    if (validations.length === 0) {\n        return false;\n    }\n\n    return validations.every((key) => run(value, key, tests, rules) !== true);\n}","// @flow\n\nimport { isType } from '../';\n\nfunction expectType(value: AnyValue, type: string, functionName: string): true | void {\n    if (!isType(value, type)) {\n        const val: string = Array.isArray(value) ? JSON.stringify(value) : value;\n        throw new TypeError(`[Passable]: Failed to execute '${functionName}': expected ${val} to be a ${type}.`);\n    }\n\n    return true;\n}\n\nexport default expectType;\n","// @flow\n\nimport {\n    reduceArrayToMap,\n    findArrayValuesInMapKeys\n} from '../index';\n\ntype Value = Array<NumStrBool>;\n\nfunction findArrayValuesInArray(values: Value, array: Value): boolean {\n    const reducedArray: MapType = reduceArrayToMap(array),\n        allItemsFound: boolean = findArrayValuesInMapKeys(values, reducedArray);\n\n    return allItemsFound;\n}\n\nexport default findArrayValuesInArray;","// @flow\n\nfunction findArrayValuesInMapKeys(array: Array<NumStrBool>, map: MapType): boolean { // eslint-disable-line flowtype/no-weak-types\n    if (!map) {return false;}\n    return array.every((element) => map && map.has(element));\n}\n\nexport default findArrayValuesInMapKeys;","// @flow\nfunction findValInArrayOrString(value: string | AnyValue, container: Array<NumStrBool> | string): boolean {\n    return container.indexOf(value) > -1;\n}\n\nexport default findValInArrayOrString;","// @flow\nfunction getSize(value: AnyValue): number {\n\n    if (!value) {\n        return 0;\n    } else if (typeof value === 'number' && !isNaN(value)) {\n        return value;\n    } else if (value.hasOwnProperty('length')) {\n        return value.length;\n    } else if (typeof value === 'object') {\n        return Object.keys(value).length;\n    } else {\n        return 0;\n    }\n};\n\nexport default getSize;","// @flow\n\n/**\n * Check if value type matches any of provided types\n * Allows checking agains custom type 'array' for array values\n *\n * @example\n * // returns false\n * isType(5, 'string')\n * @example\n * // returns true\n * isType([], 'string', 'array')\n * @param {any} value Value to match\n * @param {...string} types\n * @return {boolean} true if value matches against any type, false otherwise\n */\nfunction isType(value: mixed, ...types: Array<string>): boolean {\n    return types.some((type) => type === 'array' ? Array.isArray(value) : (typeof value === type));\n}\n\nexport default isType;","// @flow\n\nfunction reduceArrayToMap(array: Array<NumStrBool>): MapType {\n    return array.reduce((acc, val) => {\n        acc.set(val, true);\n\t    return acc;\n    }, new Map());\n}\n\nexport default reduceArrayToMap;","// @flow\nimport { isType, expectType } from '../../helpers';\n\nfunction isArray(value: mixed, expect: boolean = true): boolean {\n    expectType(expect, 'boolean', 'isArray');\n    return isType(value, 'array') === expect;\n}\n\nisArray.negativeForm = 'isNotArray';\n\nexport default isArray;","// @flow\n\nimport { isType, expectType } from '../../helpers';\n\nfunction isNumber(value: mixed, expect: boolean = true): boolean {\n    expectType(expect, 'boolean', 'isNumber');\n    return isType(value, 'number') === expect;\n}\n\nisNumber.negativeForm = 'isNotNumber';\n\nexport default isNumber;","// @flow\nimport { isType, expectType } from '../../helpers';\n\nfunction isString(value: mixed, expect: boolean = true): boolean {\n    expectType(expect, 'boolean', 'isString');\n    return isType(value, 'string') === expect;\n}\n\nisString.negativeForm = 'isNotString';\n\nexport default isString;","// @flow\nimport { isType } from '../../helpers';\n\nfunction matches(value: string, regex: RegExp | string): boolean {\n\n    if (regex instanceof RegExp) {\n        return regex.test(value);\n    } else if (isType(regex, 'string')) {\n        return new RegExp(regex).test(value);\n    } else {\n        return false;\n    }\n}\n\nmatches.negativeForm = 'notMatches';\n\nexport default matches;","// @flow\n\nimport {\n    isType,\n    findArrayValuesInArray,\n    findValInArrayOrString\n} from '../../helpers';\n\ntype All = NumStrBool | Array<NumStrBool>;\ntype Value = All | Array<NumStrBool>;\ntype Arg = string | Array<NumStrBool>;\n\nfunction inside(value: Value, arg1: Arg): boolean {\n\n    if (Array.isArray(arg1)) {\n\n        if (isType(value, 'string', 'number', 'boolean')) {\n            return findValInArrayOrString(value, arg1);\n        }\n        if (Array.isArray(value)) {\n            return findArrayValuesInArray(value, arg1);\n        }\n    }\n\n    // both value and arg1 are strings\n    if (isType(arg1, 'string') && isType(value, 'string')) {\n        return findValInArrayOrString(value, arg1);\n    }\n\n    return false;\n}\n\ninside.negativeForm = 'notInside';\n\nexport default inside;","// @flow\n\nimport { expectType } from '../../helpers';\n\nfunction isNumeric(value: mixed, expect: boolean = true): boolean {\n    expectType(expect, 'boolean', 'isNumeric');\n\n    const result: boolean = !isNaN(parseFloat(value)) && !isNaN(Number(value)) && isFinite(value);\n    return result === expect;\n}\n\nisNumeric.negativeForm = 'isNotNumeric';\n\nexport default isNumeric;","// @flow\nimport { expectType, getSize } from '../../helpers';\n\nfunction isEmpty(value: mixed, expect: boolean = true): boolean {\n    expectType(expect, 'boolean', 'isEmpty');\n\n    return (getSize(value) === 0) === expect;\n};\n\nisEmpty.negativeForm = 'isNotEmpty';\n\nexport default isEmpty;","// @flow\nimport { getSize } from '../../helpers';\n\nfunction sizeEquals(value: mixed, arg1: number) {\n    return getSize(value) === arg1;\n}\n\nsizeEquals.negativeForm = 'sizeNotEquals';\n\nexport default sizeEquals;","// @flow\nimport { getSize } from '../../helpers';\n\nfunction largerThan(value: mixed, arg1: number): boolean {\n    return getSize(value) > arg1;\n}\n\nexport default largerThan;","// @flow\nimport {getSize} from '../../helpers';\n\nfunction smallerThan(value: mixed, arg1: number) {\n    return getSize(value) < arg1;\n}\n\nexport default smallerThan;","// @flow\nimport {getSize} from '../../helpers';\n\nfunction smallerThanOrEquals(value: mixed, arg1: number) {\n    return getSize(value) <= arg1;\n}\n\nexport default smallerThanOrEquals;","// @flow\nimport {getSize} from '../../helpers';\n\nfunction largerThanOrEquals(value: mixed, arg1: number): boolean {\n    return getSize(value) >= arg1;\n}\n\nexport default largerThanOrEquals;","// @flow\nimport isNumeric from '../../content/is_numeric';\n\nfunction greaterThan(value: NumericValue, arg1: NumericValue): boolean {\n    return isNumeric(value) && isNumeric(arg1) && Number(value) > Number(arg1);\n}\n\ngreaterThan.alias = 'gt';\n\nexport default greaterThan;","// @flow\nimport isNumeric from '../../content/is_numeric';\n\nfunction greaterThanOrEquals(value: NumericValue, arg1: NumericValue): boolean {\n    return isNumeric(value) && isNumeric(arg1) && Number(value) >= Number(arg1);\n}\n\ngreaterThanOrEquals.alias = 'gte';\n\nexport default greaterThanOrEquals;","// @flow\nimport isNumeric from '../../content/is_numeric';\n\nfunction lessThan(value: NumericValue, arg1: NumericValue): boolean {\n    return isNumeric(value) && isNumeric(arg1) && Number(value) < Number(arg1);\n}\n\nlessThan.alias = 'lt';\n\nexport default lessThan;","// @flow\nimport isNumeric from '../../content/is_numeric';\n\nfunction lessThanOrEquals(value: NumericValue, arg1: NumericValue): boolean {\n    return isNumeric(value) && isNumeric(arg1) && Number(value) <= Number(arg1);\n}\n\nlessThanOrEquals.alias = 'lte';\n\nexport default lessThanOrEquals;","// @flow\n\n/**\n * Collects rules with `negativeForm` or `alias` attributes.\n * Adds a rule with the correct configuration.\n * @param {Object} rules - enforce rules object\n * @returns {Object} extended rules object\n */\nfunction extendRules(rules: EnforceRules) {\n\n    for (const rule: string in rules) {\n        const negativeForm: string = rules[rule].negativeForm;\n        const alias: string = rules[rule].alias;\n\n        if (negativeForm) {\n            rules[negativeForm] = (...args) => !rules[rule](...args);\n        }\n\n        if (alias) {\n            rules[alias] = rules[rule];\n        }\n    }\n\n    return rules;\n}\n\nexport default extendRules;\n","// @flow\n\nfunction longerThan(value: StringOrArray, arg1: number): boolean {\n    return value.length > arg1;\n}\n\nexport default longerThan;\n","// @flow\n\nfunction longerThanOrEquals(value: StringOrArray, arg1: number): boolean {\n    return value.length >= arg1;\n}\n\nexport default longerThanOrEquals;\n","// @flow\n\nfunction shorterThan(value: StringOrArray, arg1: number): boolean {\n    return value.length < arg1;\n}\n\nexport default shorterThan;\n","// @flow\n\nfunction shorterThanOrEquals(value: StringOrArray, arg1: number): boolean {\n    return value.length <= arg1;\n}\n\nexport default shorterThanOrEquals;\n","// @flow\n\nfunction lengthEquals(value: StringOrArray, arg1: number): boolean {\n    return value.length === arg1;\n}\n\nlengthEquals.negativeForm = 'lengthNotEquals';\n\nexport default lengthEquals;\n","// @flow\nimport isArray from './lang/is_array';\nimport isNumber from './lang/is_number';\nimport isString from './lang/is_string';\nimport matches from './content/matches';\nimport inside from './content/inside';\nimport isNumeric from './content/is_numeric';\nimport isEmpty from './size/is_empty';\nimport sizeEquals from './size/size_equals';\nimport largerThan from './size/larger_than';\nimport smallerThan from './size/smaller_than';\nimport smallerThanOrEquals from './size/smaller_than_or_equals';\nimport largerThanOrEquals from './size/larger_than_or_equals';\nimport greaterThan from './size/greater_than';\nimport greaterThanOrEquals from './size/greater_than_or_equals';\nimport lessThan from './size/less_than';\nimport lessThanOrEquals from './size/less_than_or_equals';\nimport extendRules from './helpers/extend_rules';\nimport longerThan from './size/longer_than';\nimport longerThanOrEquals from './size/longer_than_or_equals';\nimport shorterThan from './size/shorter_than';\nimport shorterThanOrEquals from './size/shorter_than_or_equals';\nimport lengthEquals from './size/length_equals';\n\nconst rules: EnforceRules = {\n    isArray,\n    isNumber,\n    isString,\n    matches,\n    inside,\n    isNumeric,\n    isEmpty,\n    largerThan,\n    smallerThan,\n    smallerThanOrEquals,\n    largerThanOrEquals,\n    sizeEquals,\n    greaterThan,\n    greaterThanOrEquals,\n    lessThan,\n    lessThanOrEquals,\n    longerThan,\n    longerThanOrEquals,\n    shorterThan,\n    shorterThanOrEquals,\n    lengthEquals\n};\n\nexport default extendRules(rules);","// @flow\n\n/**\n * Run group of tests using test runner. (e.g. `anyOf`)\n *\n * @param {Object} allRules\n * @param {Function} runner - test runner\n * @param {Any} value\n * @param {Object} tests\n * @return {object} enforce object\n */\nfunction compound(allRules: EnforceRules, runner: Runner, value: AnyValue, tests: CompoundTestObject): void {\n    if (typeof runner !== 'function') { return; }\n\n    if (runner(value, tests, allRules) !== true) {\n        throw new Error(`[Enforce]: ${runner.name}  invalid ${typeof value} value`);\n    }\n}\n\nexport default compound;","// @flow\n\n/**\n * Run a single rule against enforced value (e.g. `isNumber()`)\n *\n * @param {Function} rule - rule to run\n * @param {Any} value\n * @param {Array} args list of arguments sent from consumer\n */\nfunction rule(rule: EnforceRule, value: AnyValue, ...args: RuleArgs): void {\n\n    if (typeof rule !== 'function') { return; }\n\n    if (rule(value, ...args) !== true) {\n        throw new Error(`[Enforce]: ${rule.name}  invalid ${typeof value} value`);\n    }\n}\n\nexport default rule;\n","import proxyPolyfill from 'proxy-polyfill/src/proxy.js';\n\nconst glob = Function('return this')();\n\nfunction safeProxy(target, handler) {\n\n    if (!glob.Proxy) {\n        const ProxyPolyfill = proxyPolyfill();\n        return new ProxyPolyfill(target, handler);\n    }\n\n    return new Proxy(target, handler);\n}\n\nexport default safeProxy;","// @flow\n\nimport * as runnables from './runnables';\nimport * as runners from './runners';\nimport safeProxy from './helpers/safe_proxy';\n\nconst Enforce: Function = (customRules: EnforceRules = {}): EnforceInstance => {\n    const rules: EnforceRules = Object.assign({}, runnables.rules, customRules);\n    const allRunnables: EnforceRules = Object.assign({}, runnables.compounds, rules);\n\n    const enforce: Function = (value: AnyValue): EnforceRules => {\n        const proxy: EnforceRules = safeProxy(allRunnables, {\n            get: (allRunnables, fnName) => {\n\n                if (rules.hasOwnProperty(fnName) && typeof rules[fnName] === 'function') {\n                    return (...args) => {\n                        runners.rule(rules[fnName], value, ...args);\n                        return proxy;\n                    };\n                } else if (runnables.compounds.hasOwnProperty(fnName) && typeof runnables.compounds[fnName] === 'function') {\n                    return (tests) => {\n                        runners.compound(rules, runnables.compounds[fnName], value, tests);\n                        return proxy;\n                    };\n                } else {\n                    return allRunnables[fnName];\n                }\n            }\n        });\n        return proxy;\n    };\n\n    return enforce;\n};\n\nexport default Enforce;","// @flow\n\n/**\n * Run tests and catch errors\n *\n * @param {function} callback The test content\n * @return {boolean}\n */\nfunction validate(test: PassableTest): boolean {\n\n    if (typeof test !== 'function' && !(test instanceof Promise)) {\n        throw new TypeError(`[Validate]: expected ${typeof test} to be a function.`);\n    }\n\n    try {\n        return test() !== false;\n    } catch (_) {\n        return false;\n    }\n}\n\nexport default validate;","// @flow\nimport Passable from './core/Passable';\nimport Enforce from './Enforce';\nimport validate from './validate';\nimport { WARN, FAIL } from './core/ResultObject';\n\nfunction passable(name: string, tests: TestsWrapper, specific: ?SpecificArgs) {\n    const suite: Passable = new Passable(name, tests, specific);\n    return suite.res;\n}\n\npassable.VERSION = PASSABLE_VERSION;\npassable.enforce = new Enforce({});\npassable.Enforce = Enforce;\npassable.validate = validate;\npassable.WARN = WARN;\npassable.FAIL = FAIL;\n\nexport default passable;"],"sourceRoot":""}